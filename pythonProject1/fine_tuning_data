"var total = 0\n\nwhile (prices.isNotEmpty()) {\n    val price = prices.removeAt(0)\n    \n    total += price\n}\n\nval averagePrice = total / prices.size\n\nreturn averagePrice"
"var index = 0\nval geneLen = targetGene.length\n\nwhile (index <= sequence.length - geneLen) {\n    if (sequence.substring(index, index + geneLen) == targetGene) {\n        index\n    }\n    index++\n}\n\nreturn -1"
"if (!string1.isNullOrEmpty() && !string2.isNullOrEmpty()) {\n        val words1 = string1.split(\" \")\n        val words2 = string2.split(\" \")\n        val commonWords = HashSet<String>()\n\n        for (word1 in words1) {\n            for (word2 in words2) {\n                if (word1 == word2) {\n                    commonWords.add(word1)\n                }\n            }\n        }\n\n        return commonWords\n    } else {\n        throw IllegalArgumentException(\"Both strings must not be empty\")\n    }"
"fun findAdvantages(musician1: Map<String, Set<String>>, musician2: Map<String, Set<String>>): Pair<Set<String>, Boolean> {\n    val musician1Advantages = musician1[\"advantages\"] ?: emptySet()\n    val musician2Advantages = musician2[\"advantages\"] ?: emptySet()\n\n    val commonAdvantages = musician1Advantages.intersect(musician2Advantages)\n    val advantagesEqual = musician1Advantages.size == musician2Advantages.size\n\n    return Pair(commonAdvantages, advantagesEqual)\n}"
"fun repeatNTimes(n: Int): Any {\n    return if (n > 0) {\n        return arrayOf(\"Done\").repeat(n).toTypedArray()\n    } else {\n        return \"Done\"\n    }\n}"
"val graphic_designer_tuple = (graphic_designer_name, graphic_designer_age, graphic_designer_skill_level, graphic_designer_experience)\n\nreturn graphic_designer_tuple\n\n// Example usage\nval designer_info = create_tuple(\"John\", 25, \"Intermediate\", 3)\n"
"val intersection = s1.filter { it in s2 }\nreturn intersection"
"val minElement = set1.minOrNull()\nreturn set2.filter { it >= minElement }.toSet()"
"val common_elements = mutableListOf<Any>()\n\nfor (element in list1) {\n    if (element !in list2) {\n        common_elements.add(element)\n    }\n}\n\nreturn common_elements"
"var total = 0\n\nfor (num in nums) {\n    if (num > 10) {\n        total += num\n    }\n}\n\nreturn total"
"val matchingCriminals = mutableListOf<String>()\nfor (criminal in criminals) {\n    if (searchTerms.all { term -> criminal.contains(term) }) {\n        matchingCriminals.add(criminal)\n    }\n}\nreturn matchingCriminals"
"val result = mutableSetOf(sequence[0] + number)\nfor (i in 1 until sequence.size) {\n    val currentSet = mutableSetOf<String>()\n    for (j in result) {\n        currentSet.add(j + sequence[i])\n    }\n    result.retainAll(currentSet)\n}\nreturn result.toList()"
"val specialChars = mutableListOf<Char>()\n\nfor (i in string.indices) {\n    if (string[i].isUpperCase() && i > 0 && i < string.length - 1) {\n        if (!string[i - 1].isLetter() && !string[i + 1].isLetter()) {\n            specialChars.add(string[i])\n        }\n    }\n}\n\nreturn specialChars\n\nval missingCode = \"Ab#cD*efG\"\nval result = findSpecialChars(missingCode)\nprintln(result)"
"var factorial = 1\nvar n = 5\n\nwhile (n > 1) {\n    factorial *= if (n > 1) n else 1\n    n -= 1\n}\n\nprintln(factorial)"
"result = base_number"
"var total_sales = 0.0\n\nrevenue_list.forEach { revenue ->\n    total_sales += revenue.toDouble()\n}\n\nreturn total_sales"
"val affordableItems = mutableListOf<String>()\n\nfor ((item, price) in items) {\n    if (price < budget) {\n        affordableItems.add(item)\n    }\n}\n\nreturn affordableItems"
"val genreDict = mutableMapOf<String, Int>()\nvar i = 0\n\nwhile (i < musicianList.size) {\n    val genre = musicianList[i]\n    if (!genreDict.containsKey(genre)) {\n        genreDict[genre] = 1\n    } else {\n        genreDict[genre] = genreDict[genre]!! + 1\n    }\n\n    i++\n}\n\nreturn genreDict"
"var unavailableShifts = 0\n\nfor (shift in schedule) {\n    val (startTime, endTime) = shift\n    \n    if (!nurseNameAvailable(nurseName, shift)) {\n        unavailableShifts++\n    }\n}\n\nprintln(\"Number of shifts where $nurseName is not available: $unavailableShifts\")"
"if (elevations.isEmpty()) {\n        return null\n    }\n\n    var highestPeak = elevations[0]\n    for (elevation in elevations) {\n        if (elevation > highestPeak) {\n            highestPeak = elevation\n        }\n\n        if (elevation > 5000) {\n            break\n        }\n    }\n\n    return highestPeak"
"val volumes = mutableListOf<Double>()\n\nfun calculateVolumes(spheres: List<Int>): List<Double> {\n    val volumes = mutableListOf<Double>()\n    for (radius in spheres) {\n        val volume = (4.0 / 3.0) * 3.14159 * (radius.toDouble().pow(3))\n        volumes.add(volume)\n    }\n    return volumes\n}\n\nval radii = listOf(2, 3, 4, 5)\nval sphereVolumes = calculateVolumes(radii)\nprintln(sphereVolumes)\n\n// Output: [33.51029333333333, 113.09722666666666, 268.08234666666664, 523.5983333333332]"
"var commonCharacters = mutableListOf<Char>()\nfor (char1 in therapistNotes) {\n    for (char2 in patientNotes) {\n        if (char1 == char2 && char1 !in commonCharacters) {\n            commonCharacters.add(char1)\n        }\n    }\n}\n\nreturn commonCharacters.size"
"var modifiedNotes = \"\"\nfor (char1 in therapistNotes) {\n    var isCommon = false\n    for (char2 in patientNotes) {\n        if (char1 == char2) {\n            modifiedNotes += \"#\"\n            isCommon = true\n            break\n        }\n    }\n    if (!isCommon) {\n        modifiedNotes += char1\n    }\n}\n\nreturn modifiedNotes"
"var commonElements = emptyList<Any>()\nfor (elem in data1) {\n    if (elem in data2) {\n        commonElements += elem\n    }\n}\n\nreturn commonElements"
"for ((index, actor) in actor_data.withIndex()) {\n    if (actor[\"experience\"] < 5) {\n        actor[\"salary\"] = actor[\"salary\"] * 1.1\n    } else if (actor[\"experience\"] >= 5 && actor[\"experience\"] < 10) {\n        actor[\"salary\"] = actor[\"salary\"] * 1.2\n    } else {\n        actor[\"salary\"] = actor[\"salary\"] * 1.3\n    }\n}\n\nreturn actor_data"
"if (!artist1.isNotEmpty() || !artist2.isNotEmpty()) {\n    throw IllegalArgumentException(\"Artist name cannot be empty\")\n}\n\nvar commonLetters = \"\"\nvar i = 0\n\nwhile (i < artist1.length) {\n    var j = 0\n    while (j < artist2.length) {\n        if (artist1[i] == artist2[j]) {\n            commonLetters += artist1[i]\n            break\n        }\n        j++\n    }\n    i++\n}\n\nreturn commonLetters"
"val breakLength = 30  // minutes\nvar gapLength = 0\nfor (slot in schedule) {\n    if (slot == 0) {\n        gapLength += 1\n    } else {\n        if (gapLength >= breakLength) {\n            return true\n        }\n    }\n}"
"val animalTuple: Tuple = Tuple()\n\n    if (name is String && species is String && size is String &&\n        weight is Float && age is Int) {\n\n        animalTuple = Tuple(name, species, size, weight, age)\n        \n        if (weight > 100) {\n            println(\"Warning: This animal is significantly heavier than average.\")\n        }\n        \n        if (age < 1) {\n            println(\"This animal is very young\")\n        }\n    }"
"val complex_num = complex(x)\nval real_part = complex_num.real\nval imag_part = complex_num.imag\nval conjugate = complex(real_part, -imag_part)\nval absolute_value = abs(complex_num)\nreturn conjugate to absolute_value"
"val result = mutableListOf<Map<String, Any>>()\nfor (location in locations) {\n    if (location in photodatabase) {\n        for (photo in photodatabase[location]) {\n            if (tags.any { tag -> tag in photo[\"tags\"] as List<String> }) {\n                result.add(photo)\n            }\n        }\n    }\n}\nreturn result"
"if (photo.containsKey(\"location\") && photo[\"location\"] is String) {\n        return photo[\"location\"] as String\n    } else {\n        return \"Unknown\"\n    }"
"val specialPhotos = mutableListOf<Any>()\n\nfor (photo in photos) {\n    val location = getPhotoLocation(photo)\n    \n    if (location is String && location.startsWith(\"Special:\")) {\n        specialPhotos.add(photo)\n    }\n}\n\nreturn specialPhotos\n"
"val animalNames = vetRecords.keys.toList()\nvar maxVisits = 0\nfor (animalName in vetRecords) {\n    val visits = vetRecords[animalName]\n    if (visits > maxVisits) {\n        maxVisits = visits\n    }\n}\n\nfor (i in animalNames.indices) {\n    if (vetRecords[animalNames[i]] == maxVisits) {\n        return -1 * (animalNames.size - i - 1)\n    }\n}"
"val vowels = listOf('a', 'e', 'i', 'o', 'u')\n\nfun replaceMissingVowels(text: String): String {\n    var newText = text.toLowerCase()\n\n    for (char in newText) {\n        if (char.isLetter() && char !in vowels) {\n            newText = newText.replace(char, 'x')\n        }\n    }\n\n    return newText\n}\n\nfun main() {\n    val inputText = \"Hello, how are you today?\"\n    println(replaceMissingVowels(inputText))\n}"
"fun categorizePatients(patients: Map<String, Int>): Map<String, List<String>> {\n    for ((patient, age) in patients) {\n        if (age < 18) {\n            patients[patient] = (patients.getOrDefault(patient, mutableListOf()) + \"CHILD\").toMutableList()\n        } else if (18 <= age && age <= 65) {\n            patients[patient] = (patients.getOrDefault(patient, mutableListOf()) + \"ADULT\").toMutableList()\n        } else if (age >= 65) {\n            patients[patient] = (patients.getOrDefault(patient, mutableListOf()) + \"ELDERLY\").toMutableList()\n        }\n    }\n    return patients\n}\n\nfun main() {\n    val patients = mapOf(\n        \"John\" to 22,\n        \"Emily\" to 8,\n        \"David\" to 45\n    )\n    \n    val categorizedPatients = categorizePatients(patients)\n    println(categorizedPatients)\n}"
"val averageIncomes = mutableListOf<Double>()\n    for (cityData in data) {\n        var totalIncome = 0\n        var numHouseholds = 0\n        for (household in cityData) {\n            for (income in household[\"incomes\"] as List<Int>) {\n                totalIncome += income\n                numHouseholds++\n            }\n        }\n        \n        if (numHouseholds > 0) {\n            val averageIncome = totalIncome.toDouble() / numHouseholds\n            averageIncomes.add(averageIncome)\n        }\n    }\n    \n    return averageIncomes\n}\n\nval cityData = listOf(\n    listOf(\n        mapOf(\"incomes\" to listOf(45000, 60000, 75000)),\n        mapOf(\"incomes\" to listOf(35000, 48000)),\n        mapOf(\"incomes\" to listOf(52000, 68000, 75000, 82000))\n    ),\n    listOf(\n        mapOf(\"incomes\" to listOf(58000, 62000, 69000)),\n        mapOf(\"incomes\" to listOf(42000, 55000, 72000)),\n        mapOf(\"incomes\" to listOf(48000, 55000))\n    ),\n    listOf(\n        mapOf(\"incomes\" to listOf(45000, 51000, 66000)),\n        mapOf(\"incomes\" to listOf(33000, 42000))\n    )\n)"
"val unique_nums = mutableSetOf<Int>()\nval repeated_nums = mutableSetOf<Int>()\nval result = mutableListOf<Int>()\n\nfor (num in data) {\n    if (num % 3 != 0) {\n        if (num in unique_nums) {\n            repeated_nums.add(num)\n        } else {\n            unique_nums.add(num)\n        }\n    }\n}\n\nfor (num in repeated_nums) {\n    if (data.count { it == num } > 1) {\n        result.add(num)\n    }\n}\n\nreturn result"
"fun isValidChoice(choice: Int): Boolean {\n    return choice in 1..10\n}"
"fun processChoice(choice: Int): Boolean {\n    if (choice % 2 == 0) {\n        println(\"Even choice!\")\n        return false\n    }\n    \n    if (isPrime(choice)) {\n        println(\"Prime choice!\")\n        return true\n    }\n    \n    if (choice % 5 == 0) {\n        println(\"Divisible by 5!\")\n        return true\n    }\n    \n    return false\n}\n\nfun isPrime(n: Int): Boolean {\n    if (n <= 1) {\n        return false\n    }\n    \n    for (i in 2 until n) {\n        if (n % i == 0) {\n            return false\n        }\n    }\n    \n    return true\n}"
"while (true) {\n    val choice = readLine()!!.toInt()\n    \n    val valid = validateInput(choice)\n    if (!valid) {\n        println(\"Invalid input. Try again.\")\n        continue\n    }\n    \n    val even = choice % 2 == 0\n    val prime = choice > 1\n}"
"val fuelUsage = distanceTraveled.toFloat() / fuelCapacity\nreturn fuelUsage"
"val speedRatio = speed.toFloat() / referenceSpeed\nreturn speedRatio"
"val modifiedExpenses = mutableListOf<Double>()\n\nfor ((_, amount) in accountantData) {\n    modifiedExpenses.add(amount + 1_000_000)\n}\n\nreturn modifiedExpenses"
"while (Math.abs(photo_exposure - target_exposure) > 0.01) {\n    if (photo_exposure < target_exposure) {\n        photo_exposure += 0.1\n        if (photo_exposure > 1.0) {\n            photo_exposure = 1.0\n        }\n    } else {\n        photo_exposure -= 0.1\n        if (photo_exposure < 0.0) {\n            photo_exposure = 0.0\n        }\n    }\n}\n\nreturn photo_exposure"
"val shiftedLayers = rockLayers.toMutableList()\n\nfor (shift in 0 until numShifts) {\n    for (i in shiftedLayers.indices) {\n        if (i == 0) {\n            shiftedLayers[i] = shiftedLayers[i] shl 1\n        } else {\n            shiftedLayers[i] = shiftedLayers[i] shr 1\n        }\n    }\n}\n\nval totalDepth = shiftedLayers.sum()\nval averageDepth = totalDepth.toDouble() / shiftedLayers.size\n\naverageDepth"
"var result = mutableListOf<Double>()\n\nvar text = text.replace(\" \", \"\")\n\nvar expressions = text.split(\",\")\n\nfor (expr in expressions) {\n    result.add(eval(expr))\n}\n\nreturn result.toTypedArray()"
"val commonElements = mutableListOf<Int>()\n\nfor (i in lst1.indices) {\n    if (lst1[i] == lst2[i] || lst2[i] == null) {\n        commonElements.add(lst1[i])\n    }\n}\n\nreturn commonElements"
"fun findMissingItems(items: List<Int>): List<Int> {\n    val minItem = items.minOrNull() ?: 0\n    val maxItem = items.maxOrNull() ?: 0\n\n    val completeRange = (minItem..maxItem).toList()\n\n    val missingItems = mutableListOf<Int>()\n\n    for (num in completeRange) {\n        if (num !in items) {\n            missingItems.add(num)\n        }\n    }\n\n    return missingItems\n}"
"if ((animal_1 == 0 && animal_2 != 0) || (animal_1 != 0 && animal_2 == 0)) {\n        return animal_1 * animal_2\n    } else if (animal_1 == 0 && animal_[...]\n"
"val modifiedElement = mutableListOf<Char>()\n\nwhile (true) {\n    println(\"Please select an option:\")\n    println(\"1. Remove duplicate characters in the aerospace element.\")\n    println(\"2. Reverse the order of characters in the aerospace element.\")\n    println(\"3. Count the occurrence of a specific character in the aerospace element.\")\n    println(\"4. Exit the program:\")\n\n    val choice = readLine()\n\n    if (choice == \"1\") {\n        // Remove duplicate characters\n    }\n}"
"val pairs = mutableListOf<Pair<Any, Any>>()\nval n = membership_list.size\n\nfor (i in 0 until n) {\n    for (j in i+1 until n) {\n        pairs.add(Pair(membership_list[i], membership_list[j]))\n    }\n}\n\nreturn pairs"
"fun checkInputs(input1: Boolean, input2: Boolean, input3: Boolean): Boolean {\n    return if (input1 || input2 || input3) {\n        input1\n    } else {\n        input2\n    }\n}"
"val commonElements = mutableListOf<Any>()\n\nfor (element1 in list1) {\n    for (element2 in list2) {\n        if (element1 == element2) {\n            commonElements.add(element1)\n        }\n    }\n}\n\nreturn commonElements"
"val danceMoves = HashSet<String>()\n\nfor (dancer1 in dancers) {\n    for (dancer2 in dancers) {\n        if (dancer1 != dancer2) {\n            val danceMove = \"$dancer1+$dancer2\"\n            danceMoves.add(danceMove)\n        }\n    }\n}\n\nreturn danceMoves\n\n// Example usage\nval dancers = setOf(\"Alice\", \"Bob\", \"Charlie\")\nval danceMoves = dancerMoves(dancers)\nprintln(danceMoves)\n// Output: {'Alice+Charlie', 'Charlie+Bob', 'Bob+Alice'}"
"architects.map { (name, age) ->\n    Pair(name, if (age > 30) Math.sqrt(age.toDouble()) else age.toDouble())\n}"
"val remaining_population = target_population - current_population\nreturn remaining_population"
"val full_name = actor1 + \" \" + actor2\n    \n    return full_name == \"Leonardo DiCaprio\""
"var result = \"\"\nfor (string in stringsList) {\n    result += string\n}\nreturn result"
"var intersection = mutableListOf<Int>()\nfor (num1 in list1) {\n    for (num2 in list2) {\n        if (num1 == num2) {\n            intersection.add(num1)\n        }\n    }\n}\nreturn intersection"
"val target = 10\n\nval pairs = mutableListOf<Pair<Int, Int>>()\n\nfor (i in sequence.indices) {\n    for (j in i + 1 until sequence.size) {\n        if (sequence[i] + sequence[j] == target) {\n            pairs.add(Pair(sequence[i], sequence[j]))\n        }\n    }\n}\n\nreturn pairs"
"for (element in routine) {\n    val (move, start_index, end_index) = element\n\n    if (start_index >= 0 && start_index < dancer.size) {\n        dancer[start_index] = move * (end_index - start_index + 1)\n    }\n}\n\nprintln(\"Final Dance Routine:\")\nfor (move in dancer) {\n    println(move)\n}\n\nval dancer_moves = listOf(\"Jump\", \"Spin\", \"Twirl\", \"Slide\", \"Kick\")\nval routine_elements = listOf(Triple(\"Shake\", 0, 2), Triple(\"Clap\", 1, 3), Triple(\"Jump\", 3, 4))"
"for (element in lst2) {\n    if (element in lst1) {\n        lst1.remove(element)\n    }\n}\n\nval concatenatedList = lst1 + lst2\nval concatenatedListNoDuplicates = concatenatedList.toSet().toList()\n\nreturn concatenatedListNoDuplicates"
"fun checkMatrixMultiplication(matrix1: Array<IntArray>, matrix2: Array<IntArray>): Array<IntArray> {\n    if (matrix1[0].size != matrix2.size) {\n        throw IllegalArgumentException(\"The number of columns in matrix1 must match the number of rows in matrix2\")\n    }\n\n    val resultMatrix = Array(matrix1.size) { IntArray(matrix2[0].size) { 0 } }\n\n    for (i in matrix1.indices) {\n        for (j in matrix2[0].indices) {\n            for (k in matrix2.indices) {\n                resultMatrix[i][j] += matrix1[i][k] * matrix2[k][j]\n            }\n        }\n    }\n\n    return resultMatrix\n}"
"var distance = 0.0\nfor (i in 0 until points.size - 1) {\n    val (x1, y1) = points[i]\n    val (x2, y2) = points[i + 1]\n    val pairDistance = Math.sqrt((x2 - x1).toDouble().pow(2) + (y2 - y1).toDouble().pow(2))\n\n    distance += pairDistance\n}\n\nreturn distance"
"val commonCrops = mutableListOf<String>()\n\nfor (crop in farmer1Crops) {\n    if (crop !in farmer2Crops) {\n        continue\n    }\n    \n    commonCrops.add(crop)\n}\n\nreturn commonCrops"
"if (age < 25) {\n    return \"Sorry, you must be at least 25 years old to be considered as an architect.\"\n}\n\nif (experience < 5) {\n    return \"Sorry, you must have at least 5 years of experience to be considered as an architect.\"\n}\n\nif (!skills.contains(\"design\") || !skills.contains(\"planning\") || !skills.contains(\"construction\")) {\n    return \"Sorry, you must possess design, planning, and construction skills to be considered as an architect.\"\n}\n\nreturn \"Congratulations! You qualify as an architect.\""
"val intersection = mutableListOf<Point>()\n    for (coord1 in coordinates1) {\n        for (coord2 in coordinates2) {\n            if (coord1 == coord2) {\n                intersection.add(coord1)\n                break\n            }\n        }\n    }\n    return intersection\n"
"var landArea = 0\n\nfor (feature in geographicalData) {\n    if (feature[\"type\"] == \"land\") {\n        landArea += feature[\"area\"]\n    }\n}\n\nreturn landArea"
"var maxLoad = 0\n\nfor (i in 0..designLimit.toInt()) {\n    val load = i * materialStrength\n\n    if (load >= designLimit * safetyFactor) {\n        break\n    }\n\n    maxLoad = load\n}\n\nreturn maxLoad"
"var commonAthletes = athletes[0]\n\nfor (athlete in athletes.drop(1)) {\n    var tempCommonSports = mutableListOf<String>()\n\n    for (sport in athlete) {\n        if (sport in commonAthletes) {\n            tempCommonSports.add(sport)\n        }\n    }\n    commonAthletes = tempCommonSports\n}\nreturn commonAthletes"
"val commonElements = mutableListOf<Int>()\n\nfor (num1 in list1) {\n    for (num2 in list2) {\n        if (num1 == num2) {\n            if (num1 !in commonElements) {\n                commonElements.add(num1)\n            }\n        }\n    }\n}\n\nreturn commonElements\n"
"fun manipulateString(string: String, subtract: Boolean): List<Int> {\n    val result = mutableListOf<Int>()\n\n    for ((i, char) in string.withIndex()) {\n        if (subtract) {\n            result.add(char.toInt() - i)\n        } else {\n            result.add(char.toInt() + i)\n        }\n    }\n\n    return result\n}"
"val commonElements = mutableListOf<Any>()\n\nfor (element in list1) {\n    if (element in list2 && element !in commonElements) {\n        commonElements.add(element)\n    }\n}\n\nreturn commonElements"
"val vowels = listOf('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\nvar count = 0\n\nfor (char in name) {\n    if (char in vowels) {\n        count++\n    }\n}\n\nreturn count"
"val firstHalf = dancers.take(dancers.size / 2)\nval secondHalf = dancers.drop(dancers.size / 2)\n\nif (dancer in firstHalf && secondHalf.all { otherDancer -> dancer > otherDancer }) {\n    return true\n} else {\n    return false\n}"
"val events = selection.split(\";\")\nval eventTuples = mutableListOf<Pair<String, Int>>()\n\nfor (event in events) {\n    var eventYear = \"\"\n    var eventName = \"\"\n\n    for (char in event) {\n        if (char.isDigit()) {\n            eventYear += char\n        } else {\n            eventName += char\n        }\n    }\n\n    if (eventYear != \"\") {\n        val eventTuple = Pair(eventName.trim(), eventYear.trim().toInt())\n        eventTuples.add(eventTuple)\n    }\n}\n\nreturn eventTuples.toList()"
"val numCows = readLine()!!.toInt()\n\nvar cows = emptyList<Int>()\n\nvar i = 1\nwhile (i <= numCows) {\n    cows += i\n    i++\n}\n\nreturn cows"
"val result1 = (true && false) || true || false\nval result2 = !(true && false) || !(true || false)\n\nval results = setOf(result1, result2)\n\nreturn results"
"var totalIncome = 0.0\nvar totalPopulation = 0\n\nfor (entry in data) {\n    val income = entry[\"income\"] as Double\n    val population = entry[\"population\"] as Int\n\n    totalIncome += income\n    totalPopulation += population\n}\n\nval averageIncome = totalIncome / totalPopulation\nreturn averageIncome.round(3)"
"if (numbers.isEmpty()) {\n    return null\n}\n\nval sumOfNumbers = numbers.sum()\nval mean = sumOfNumbers.toDouble() / numbers.size\n\nreturn mean"
"val sortedNumbers = numbers.sorted()\n\nif (sortedNumbers.isEmpty()) {\n    return null\n}\n\nval midIndex = sortedNumbers.size / 2\n\nval median = if (sortedNumbers.size % 2 == 1) {\n    sortedNumbers[midIndex]\n} else {\n    // Calculate the\n    // If the number of elements is even, the median is the average of the two middle elements\n    (sortedNumbers[midIndex - 1] + sortedNumbers[midIndex]) / 2.0\n}"
"val results = mutableMapOf<String, Map<String, Any>>()\n\nfor (muscle in selection) {\n    val measuredStrength = somePhysicalTherapyMethod(muscle, intensity)\n\n    val conjugate = measuredStrength.conjugate()\n    val absoluteValue = abs(measuredStrength)\n\n    results[muscle] = mapOf(\"Conjugate\" to conjugate, \"Absolute Value\" to absoluteValue)\n}\n\nreturn results\n\n// Example usage:\nval selectedMuscles = listOf(\"Quadriceps\", \"Hamstrings\", \"Gluteus Maximus\")\nval intensityLevel = 0.8\n\nval strengthDifferences = calculateStrengthDiff(selectedMuscles, intensityLevel)\nprintln(strengthDifferences)"
"var total_bill = 0.0\n\nif (hourly_rate > 0 && hours_worked > 0) {\n    total_bill = hourly_rate * hours_worked\n    \n    if (additional_charges > 0) {\n        total_bill += additional_charges\n    }\n}\n\nreturn total_bill"
"var totalHarvest = 0\n    \nvar i = 0\nwhile (i < farm.size) {\n    var j = 0\n    while (j < farm[i].size) {\n        if (farm[i][j] > 0) {\n            totalHarvest += farm[i][j]\n        }\n        j++\n    }\n    i++\n}\n\nreturn totalHarvest"
"var index = 0\nwhile (index < patients.size) {\n    val patient = patients[index]\n    if (condition in patient) {\n        return patient\n    }\n    index++\n}\nreturn null"
"val commonChars = mutableListOf<Char>()\nvar i = 0\nwhile (i < str1.length) {\n    if (str1[i] in str2) {\n        commonChars.add(str1[i])\n    }\n    i++\n}\n\nreturn commonChars"
"val commonElements = mutableListOf<String>()\n\nfor (element in rock1) {\n    if (element !in rock2) {\n        continue\n    } else {\n        commonElements.add(element)\n    }\n}\n\nreturn commonElements"
"val combinedList = books + movies\nval uniqueItems = combinedList.toSet().sorted()\nval resultTuple = uniqueItems.toTypedArray()"
"return bookIsBorrowed && bookIsOverdue"
"val commonElements = mutableListOf<Any>()\n\nfor (element in list1) {\n    if (element in list2 && element !in commonElements) {\n        commonElements.add(element)\n    }\n}\n\nreturn commonElements"
"val totalIncome = income.sum()\n\nfor (expense in expenses) {\n    totalIncome -= expense\n}\n\nreturn totalIncome"
"fun calculateNetProfit(income: Double, expenses: Double): Double {\n    val netProfit = calculateTotalIncome(income, expenses)\n    \n    if (netProfit < 0) {\n        return 0.0\n    } else {\n        return netProfit\n    }\n}"
"for ((index, coord) in coordinates.withIndex()) {\n    if (index == 1) {\n        coordinates[index] = Pair(coord.first + 10, coord.second)\n    }\n}\n\nreturn coordinates"
"val list1 = tuple1.toList()\nval list2 = tuple2.toList()\n\nfor (element in list2) {\n    if (element !in list1) {\n        list1.add(element)\n    }\n}\n\nval updated_tuple = list1.toTypedArray()\n\nreturn updated_tuple\n"
"val diagnoses = mutableListOf<String>()\n\nfor (animal in sickAnimals) {\n    println(\"Diagnosing $animal...\")\n\n    if (animal == \"dog\" || animal == \"cat\") {\n        print(\"Please enter the symptoms: \")\n        val inputSymptoms = readLine()!!.split(\", \")\n\n        val treatment = when {\n            \"coughing\" in inputSymptoms || \"sneezing\" in inputSymptoms -> \"antibiotics\"\n            \"itching\" in inputSymptoms || \"hair loss\" in inputSymptoms -> \"antiparasitic medication\"\n            \"vomiting\" in inputSymptoms || \"diarrhea\" in inputSymptoms -> \"antiemetics\"\n            else -> \"unknown\"\n        }\n        diagnoses.add(\"$animal: $treatment\")\n    } else if (animal == \"bird\") {\n        println(\"Birds have respiratory symptoms\")\n\n        // Add additional handling for birds if needed\n    }\n}"
"fun combineLists(lst1: List<Int>, lst2: List<Int>, idx1: Int, idx2: Int): List<Int> {\n    return lst1.subList(0, idx1) + lst2 + lst1.subList(idx2 + 1, lst1.size)\n}"
"if (point1 !is Complex || point2 !is Complex) {\n    return \"Invalid input!\"\n}\n\nval x1 = point1.real\nval y1 = point1.imaginary\nval x2 = point2.real\nval y2 = point2.imaginary\n\nval distance = ((x2 - x1).pow(2) + (y2 - y1).pow(2)).pow(0.5)\n\nreturn distance"
"if (point !is Complex) {\n    return \"Invalid input!\"\n}\n\nvar nearestPoint: Complex? = null\nvar minDistance = Double.POSITIVE_INFINITY\n\nfor (p in points) {\n    // Check\n}"
"val excludedCases = mutableSetOf<String>()\n\nfor (case in cases) {\n    var isExcluded = true\n    for (validCase in validCases) {\n        if (validCase == case) {\n            isExcluded = false\n            break\n        }\n    }\n    if (isExcluded) {\n        excludedCases.add(case)\n    }\n}\n\nreturn excludedCases"
"val realPart = complex_1[0] + complex_2[0]\nval imagPart = complex_1[1] + complex_2[1]\nreturn realPart to imagPart"
