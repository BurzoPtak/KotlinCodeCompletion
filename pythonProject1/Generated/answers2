{"language": "kotlin", "task_id": "HumanEval_kotlin/32", "completion": "\tval result = mutableListOf<Int>()\n\tfor (i in 0 until l.size step 3) {\n\t\tresult.addAll(l.subList(i, i + 3).sorted())\n\t}\n\treturn result\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * This function takes a list l and returns a list l' such that\n * l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n * to the values of the corresponding indices of l, but sorted.\n * >>> sort_third([1, 2, 3])\n * [1, 2, 3]\n * >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n * [2, 6, 3, 4, 8, 9, 5]\n *\n */\nfun sortThird(l: List<Int>): List<Int> {\n\tval result = mutableListOf<Int>()\n\tfor (i in 0 until l.size step"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/74", "completion": "//    TODO(\"Not yet implemented\")\n    var cube = 1\n    var i = 1\n    while (cube < a) {\n        cube = i * i * i\n        i++\n    }\n    return cube == a\n}\n\nfun main(args: Array<String>) {\n    println(iscube(1))\n    println(iscube(2))\n    println(iscube(-1))\n    println(iscube(64))\n    println(iscube(0))\n    println(iscube(180))\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Write a function that takes an integer a and returns True\n * if this integer is a cube of some integer number.\n * Note: you may assume the input is always valid.\n * Examples:\n * iscube(1) ==> True\n * iscube(2) ==> False\n * iscube(-1) ==> True\n * iscube(64) ==> True\n * iscube(0) ==> True\n * iscube(180) ==> False\n *\n */\nfun iscube(a: Int): Boolean {\n    var cube = 1\n    var i"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/160", "completion": "\n}\n\nfun main(args: Array<String>) {\n    println(generateIntegers(2, 8))\n    println(generateIntegers(8, 2))\n    println(generateIntegers(10, 14))\n}\n\nfun generateIntegers(a : Int, b : Int) : List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in a..b) {\n        if (i % 2 == 0) {\n            result.add(i)\n        }\n    }\n    return result\n}\n\nfun generateIntegers(a : Int, b : Int) : List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in a..b) {\n        if (i % 2 == 0) {\n            result.add(i)\n        }\n    }\n    return result\n}\n\nfun generateIntegers(a : Int, b : Int) : List<Int> {\n    val result = mutableListOf<Int>()\n    for (i in a..b) {\n        if (i % 2 == 0) {\n            result.add(i)\n        }\n    }\n    return result"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/88", "completion": "\tvar count = 0\n\tvar start = 0\n\tvar end = 0\n\tvar i = 0\n\twhile (i < s.length) {\n\t\tif (s[i] =='') {\n\t\t\tif (s.substring(start, i).equals(\"I\", true)) {\n\t\t\t\tcount++\n\t\t\t}\n\t\t\tstart = i + 1\n\t\t}\n\t\ti++\n\t}\n\tif (s.substring(start, i).equals(\"I\", true)) {\n\t\tcount++\n\t}\n\treturn count\n}\n\nfun main(args: Array<String>) {\n\tprintln(isBored(\"Hello world\"))\n\tprintln(isBored(\"The sky is blue. The sun is shining. I love this weather\"))\n}\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/89", "completion": "\treturn when {\n\t\tx is Int && y is Int && z is Int -> x + y == z || x + z == y || y + z == x\n\t\telse -> false\n\t}\n}\n\nfun main() {\n\tprintln(anyInt(5, 2, 7))\n\tprintln(anyInt(3, 2, 2))\n\tprintln(anyInt(3, -2, 1))\n\tprintln(anyInt(3.6, -2.2, 2))\n}\n\n// 1.0.0\nfun anyInt(x: Int, y: Int, z: Int): Boolean {\n\treturn x + y == z || x + z == y || y + z == x\n}\n\n// 1.0.1\nfun anyInt(x: Int, y: Int, z: Int): Boolean {\n\treturn x + y == z || x + z == y || y + z == x || x == y + z || y == x + z || z == x + y\n}\n\n// 1.0.2\nfun anyInt(x: Int, y: Int"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/119", "completion": "\tvar sum = 0\n\tfor (i in 0 until k) {\n\t\tval num = arr[i]\n\t\tif (num < 10) {\n\t\t\tsum += num\n\t\t} else if (num < 100) {\n\t\t\tsum += num % 10\n\t\t}\n\t}\n\treturn sum\n}\n\nfun main(args : Array<String>) {\n\tprintln(addElements(listOf(111,21,3,4000,5,6,7,8,9), 4))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/3", "completion": "\tvar balance = 0\n\tfor (operation in operations) {\n\t\tbalance += operation\n\t\tif (balance < 0) return true\n\t}\n\treturn false\n}\n\nfun main(args: Array<String>) {\n\tprintln(belowZero(listOf(1, 2, 3)))\n\tprintln(belowZero(listOf(1, 2, -4, 5)))\n}\n\n/**\n * You are given a list of integers. Your task is to find the maximum sum of non-adjacent elements in the list.\n *\n * >>> max_sum([1, 2, 3, 4])\n * 7\n * >>> max_sum([1, 2, 3, 4, 5])\n * 10\n *\n */\nfun maxSum(numbers: List<Int>): Int {\n\tvar maxSum = 0\n\tfor (i in 0 until numbers.size - 1) {\n\t\tval sum = numbers[i] + numbers[i + 1]\n\t\tif (sum > maxSum) maxSum = sum\n\t}\n\treturn maxSum\n}\n\nfun"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/84", "completion": "\tval result = mutableListOf<List<Int>>()\n\tfor (i in lst.indices) {\n\t\tif (lst[i].contains(x)) {\n\t\t\tresult.add(listOf(i, lst[i].indexOf(x)))\n\t\t}\n\t}\n\treturn result.sortedBy { it[0] }.sortedByDescending { it[1] }\n}\n\nfun main() {\n\tprintln(getRow(listOf(listOf(1, 2, 3, 4, 5, 6), listOf(1, 2, 3, 4, 1, 6), listOf(1, 2, 3, 4, 5, 1)), 1))\n\tprintln(getRow(listOf(listOf(1, 2, 3, 4, 5, 6), listOf(1, 2, 3, 4, 1, 6), listOf(1, 2, 3, 4, 5, 1)), 3))\n\tprintln(getRow(listOf(listOf(1, 2, 3, 4, 5, 6), listOf(1,"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/17", "completion": "\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Input to this function is a string representing musical notes in a special ASCII format.\n * Your task is to parse this string and return list of integers corresponding to how many beats does each\n * not last.\n\n * Here is a legend:\n * 'o' - whole note, lasts four beats\n * 'o|' - half note, lasts two beats\n * '.|' - quater note, lasts one beat\n\n * >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n * [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n *\n */\nfun parseMusic(musicString: String): List<Any> {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Input to this function is a string representing musical notes in a special ASCII format.\n * Your task is to parse this string and return list of integers corresponding to how many beats does"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/57", "completion": "\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * sum_to_n_squared is a function that sums numbers from 1 to n squared.\n * >>> sum_to_n_squared(30)\n * 14650\n * >>> sum_to_n_squared(100)\n * 505000\n * >>> sum_to_n_squared(5)\n * 125\n * >>> sum_to_n_squared(10)\n * 100\n * >>> sum_to_n_squared(1)\n * 1\n *\n */\nfun sumToNSquared(n: Int): Int {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * sum_to_n_cubed is a function that sums numbers from 1 to n cubed.\n * >>> sum_to_n_cubed(30)\n * 1312250\n * >>> sum_to_n_cubed(100)\n * 505000"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/87", "completion": "\tif (lst.isEmpty()) return null\n\tif (lst.size == 1) return null\n\tif (lst.size == 2) return null\n\tlst.sort()\n\treturn lst[1]\n}\n\nfun main() {\n\tprintln(nextSmallest(listOf(1, 2, 3, 4, 5)))\n\tprintln(nextSmallest(listOf(5, 1, 4, 3, 2)))\n\tprintln(nextSmallest(listOf()))\n\tprintln(nextSmallest(listOf(1, 1)))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/34", "completion": "\tvar max = l[0]\n\tfor (i in 1 until l.size) {\n\t\tif (l[i] > max) {\n\t\t\tmax = l[i]\n\t\t}\n\t}\n\treturn max\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return minimum element in the list.\n * >>> min_element([1, 2, 3])\n * 1\n * >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n * -10\n *\n */\nfun minElement(l: List<Int>): Int {\n\tvar min = l[0]\n\tfor (i in 1 until l.size) {\n\t\tif (l[i] < min) {\n\t\t\tmin = l[i]\n\t\t}\n\t}\n\treturn min\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return sum of all elements in the list.\n * >>> sum_elements([1"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/21", "completion": "\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Given list of numbers (of at least two elements), apply a linear transform to that list,\n * such that the smallest number will become 0 and the largest will become 1\n * >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n * [0.0, 0.25, 0.5, 0.75, 1.0]\n *\n */\nfun rescaleToUnit(numbers: List<Double>): List<Double> {\n    val min = numbers.min()!!\n    val max = numbers.max()!!\n    return numbers.map { (it - min) / (max - min) }\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Given list of numbers (of at least two elements), apply a linear transform to that list,\n * such that the smallest number will become 0 and the largest will become 1\n * >>> rescale_to_unit([1.0, 2."}
{"language": "kotlin", "task_id": "HumanEval_kotlin/42", "completion": "\tval result = StringBuilder()\n\tvar remainder = x\n\twhile (remainder > 0) {\n\t\tval digit = remainder % base\n\t\tresult.insert(0, digit)\n\t\tremainder /= base\n\t}\n\treturn result.toString()\n}\n\nfun main() {\n\tprintln(changeBase(8, 3))\n\tprintln(changeBase(8, 2))\n\tprintln(changeBase(7, 2))\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Change numerical base of input number x to base.\n * return string representation after the conversion.\n * base numbers are less than 10.\n * >>> change_base(8, 3)\n * '22'\n * >>> change_base(8, 2)\n * '1000'\n * >>> change_base(7, 2)\n * '111'\n *\n */\nfun changeBase(x: Int, base: Int): String {\n\tval result = StringBuilder()\n\tvar remainder = x\n\twhile (remainder > 0) {\n\t\tval digit = remainder"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/27", "completion": "\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * For a given string, reverse the order of characters.\n * >>> reverse('Hello')\n * 'olleH'\n *\n */\nfun reverse(string: String): String {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * For a given string, reverse the order of words.\n * >>> reverse_words('Hello World')\n * 'World Hello'\n *\n */\nfun reverseWords(string: String): String {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * For a given string, reverse the order of words and characters.\n * >>> reverse_chars('Hello World')\n * 'dlroW olleH'\n *\n */\nfun reverseChars(string: String): String {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * For a given string, reverse the order of words and characters,\n * and then reverse the order of words again.\n * >>> reverse_chars_twice('Hello World"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/141", "completion": "\tval xArr = x.split(\"/\")\n\tval nArr = n.split(\"/\")\n\tval xNum = xArr[0].toInt()\n\tval xDen = xArr[1].toInt()\n\tval nNum = nArr[0].toInt()\n\tval nDen = nArr[1].toInt()\n\treturn (xNum * nDen == nNum * xDen)\n}\n\nfun main(args: Array<String>) {\n\tprintln(simplify(\"1/5\", \"5/1\"))\n\tprintln(simplify(\"1/6\", \"2/1\"))\n\tprintln(simplify(\"7/10\", \"10/2\"))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/98", "completion": "//    TODO(\"Not yet implemented\")\n    return s.split(\" |,\".toRegex()).filter { it.isNotBlank() }\n}\n\n/**\n * You are given a string of words separated by commas or spaces. Your task is to\n * split the string into words and return an array of the words.\n *\n * For example:\n * words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n * words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n *\n */\nfun wordsString2(s: String): List<String> {\n    return s.split(\" |,\".toRegex()).filter { it.isNotBlank() }\n}\n\n/**\n * You are given a string of words separated by commas or spaces. Your task is to\n * split the string into words and return an array of the words.\n *\n * For example:\n * words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n * words_"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/75", "completion": "\tval hex = \"0123456789ABCDEF\"\n\tval primes = listOf(2, 3, 5, 7, 11, 13)\n\tvar count = 0\n\tfor (i in 0 until num.length) {\n\t\tval digit = num[i]\n\t\tif (digit in hex) {\n\t\t\tval index = hex.indexOf(digit)\n\t\t\tif (primes.contains(index)) {\n\t\t\t\tcount++\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n\nfun main(args: Array<String>) {\n\tprintln(hexKey(\"AB\"))\n\tprintln(hexKey(\"1077E\"))\n\tprintln(hexKey(\"ABED1A33\"))\n\tprintln(hexKey(\"123456789ABCDEF0\"))\n\tprintln(hexKey(\"2020\"))\n}\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/92", "completion": "\tif (dict.isEmpty()) return false\n\tval keys = dict.keys\n\tval firstKey = keys.first()\n\tval firstKeyClass = firstKey.javaClass\n\tval firstKeyClassIsString = firstKeyClass == String::class.java\n\tval allKeysAreStrings = keys.all { it.javaClass == String::class.java }\n\treturn if (firstKeyClassIsString) allKeysAreStrings else!allKeysAreStrings\n}\n\nfun main() {\n\tprintln(checkDictCase(mapOf(\"a\" to \"apple\", \"b\" to \"banana\")))\n\tprintln(checkDictCase(mapOf(\"a\" to \"apple\", \"A\" to \"banana\", \"B\" to \"banana\")))\n\tprintln(checkDictCase(mapOf(\"a\" to \"apple\", 8 to \"banana\", \"a\" to \"apple\")))\n\tprintln(checkDictCase(mapOf(\"Name\" to \"John\", \"Age\" to \"36\", \"City\" to \"Houston\")))\n\tprintln(checkDictCase(mapOf(\"STATE\" to \"NC\", \"ZIP\" to \"12"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/4", "completion": "\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * For a given list of input numbers, calculate Mean Absolute Deviation\n * around the median of this dataset.\n * Mean Absolute Deviation is the average absolute difference between each\n * element and a centerpoint (median in this case):\n * MAD = average | x - x_median |\n * >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n * 1.0\n *\n */\nfun meanAbsoluteDeviationAroundMedian(numbers: List<Double>): Double {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * For a given list of input numbers, calculate Mean Absolute Deviation\n * around the mode of this dataset.\n * Mean Absolute Deviation is the average absolute difference between each\n * element and a centerpoint (mode in this case):\n * MAD = average | x - x_mode |\n * >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n * 1"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/62", "completion": "\tval digits = x.toString().toCharArray()\n\tval length = digits.size\n\tif (shift > length) {\n\t\treturn String(digits.reversedArray())\n\t}\n\tval result = CharArray(length)\n\tfor (i in 0 until length) {\n\t\tresult[i] = digits[(i + shift) % length]\n\t}\n\treturn String(result)\n}\n\nfun main() {\n\tprintln(circularShift(12, 1))\n\tprintln(circularShift(12, 2))\n}\n\n/**\n * 1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1."}
{"language": "kotlin", "task_id": "HumanEval_kotlin/43", "completion": "\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Given length of a side and high return area for a triangle.\n * >>> triangle_area(5, 3)\n * 7.5\n *\n */\nfun triangleArea(a: Int, h: Int): Double {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Given length of a side and high return area for a triangle.\n * >>> triangle_area(5, 3)\n * 7.5\n *\n */\nfun triangleArea(a: Int, h: Int): Double {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Given length of a side and high return area for a triangle.\n * >>> triangle_area(5, 3)\n * 7.5\n *\n */\nfun triangleArea(a: Int, h: Int): Double {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Given length of a side and high return area for a triangle.\n *"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/128", "completion": "\tvar product = 1\n\tvar temp = n\n\twhile (temp > 0) {\n\t\tval digit = temp % 10\n\t\tif (digit % 2!= 0) {\n\t\t\tproduct *= digit\n\t\t}\n\t\ttemp /= 10\n\t}\n\treturn product\n}\n\nfun main(args: Array<String>) {\n\tprintln(digits(1))\n\tprintln(digits(4))\n\tprintln(digits(235))\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Given a positive integer n, return the product of the odd digits.\n * Return 0 if all digits are even.\n * For example:\n * digits(1)  == 1\n * digits(4)  == 0\n * digits(235) == 15\n *\n */\nfun digits(n : Int) : Int {\n\tvar product = 1\n\tvar temp = n\n\twhile (temp > 0) {\n\t\tval digit = temp % 10\n\t\tif (digit % 2!= 0) {\n\t\t\tproduct *="}
{"language": "kotlin", "task_id": "HumanEval_kotlin/129", "completion": "\tvar count = 0\n\tfor (i in string.indices) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++\n\t\t} else {\n\t\t\tcount--\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn count == 0\n}\n\nfun main() {\n\tprintln(isNested(\"[[]]\"))\n\tprintln(isNested(\"[]]]]]]][[[[[]\"))\n\tprintln(isNested(\"[][]\"))\n\tprintln(isNested(\"[]\"))\n\tprintln(isNested(\"[[][]]\"))\n\tprintln(isNested(\"[[]][[\"))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/46", "completion": "\treturn text.reversed() == text\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Checks if given string is a palindrome\n * >>> is_palindrome('')\n * True\n * >>> is_palindrome('aba')\n * True\n * >>> is_palindrome('aaaaa')\n * True\n * >>> is_palindrome('zbcd')\n * False\n *\n */\nfun isPalindrome(text: String): Boolean {\n\treturn text.reversed() == text\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Checks if given string is a palindrome\n * >>> is_palindrome('')\n * True\n * >>> is_palindrome('aba')\n * True\n * >>> is_palindrome('aaaaa')\n * True\n * >>> is_palindrome('zbcd')\n * False\n *\n */\nfun isPalindrome(text: String): Boolean {\n\treturn text.reversed() == text\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Checks if given string is a palindrome\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/93", "completion": "//    TODO(\"Not yet implemented\")\n    return listOf()\n}\n\nfun main(args: Array<String>) {\n    println(countUpTo(5))\n    println(countUpTo(11))\n    println(countUpTo(0))\n    println(countUpTo(20))\n    println(countUpTo(1))\n    println(countUpTo(18))\n}\n\nfun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    if (n <= 3) return true\n    if (n % 2 == 0 || n % 3 == 0) return false\n    var i = 5\n    while (i * i <= n) {\n        if (n % i == 0 || n % (i + 2) == 0) return false\n        i += 6\n    }\n    return true\n}\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/90", "completion": "\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Write a function that takes a message, and decodes in such a\n * way that it swaps case of all letters, replaces all vowels in\n * the message with the letter that appears 2 places behind that\n * vowel in the english alphabet.\n * Assume only letters.\n *\n * Examples:\n * >>> decode('TGST')\n * 'test'\n * >>> decode('tHKS KS C MGSSCGG')\n * 'This is a message'\n *\n */\nfun decode(message: String): String {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Write a function that takes a message, and encodes in such a\n * way that it swaps case of all letters, replaces all vowels in\n * the message with the letter that appears 3 places ahead of that\n * vowel in the english alphabet.\n * Assume only letters.\n *\n * Examples:\n * >>> encode('test')\n * 'UHTS'\n * >>> encode('This is a message"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/150", "completion": "\tvar strongestExtension = \"\"\n\tvar strongestStrength = 0\n\tfor (extension in extensions) {\n\t\tval strength = extension.count { it.isUpperCase() } - extension.count { it.isLowerCase() }\n\t\tif (strength > strongestStrength) {\n\t\t\tstrongestExtension = extension\n\t\t\tstrongestStrength = strength\n\t\t}\n\t}\n\treturn \"$className.$strongestExtension\"\n}\n\nfun main(args : Array<String>) {\n\tprintln(strongestExtension(\"Slices\", listOf(\"SErviNGSliCes\", \"Cheese\", \"StuFfed\")))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/40", "completion": "//    TODO(\"Not yet implemented\")\n    return l.map { it + 1 }\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return list with elements incremented by 1.\n * >>> incr_list([1, 2, 3])\n * [2, 3, 4]\n * >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [6, 4, 6, 3, 4, 4, 10, 1, 124]\n *\n */\nfun incrList2(l: List<Int>): List<Int> {\n//    TODO(\"Not yet implemented\")\n    return l.map { it + 1 }\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return list with elements incremented by 1.\n * >>> incr_list([1, 2, 3])\n * [2, 3, 4]\n * >>> incr_list([5, 3, "}
{"language": "kotlin", "task_id": "HumanEval_kotlin/51", "completion": "\tval s0Chars = s0.toCharArray()\n\tval s1Chars = s1.toCharArray()\n\ts0Chars.sort()\n\ts1Chars.sort()\n\treturn s0Chars.contentEquals(s1Chars)\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Check if two words have the same characters.\n * >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n * True\n * >>> same_chars('abcd', 'dddddddabc')\n * True\n * >>> same_chars('dddddddabc', 'abcd')\n * True\n * >>> same_chars('eabcd', 'dddddddabc')\n * False\n * >>> same_chars('abcd', 'dddddddabce')\n * False\n * >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n * False\n *\n */\nfun sameChars2(s0: String, s1: String): Boolean {\n\tval s0Chars = s0.toCharArray()\n\tval s1Chars = s1.toCharArray()\n\ts0Chars.sort()\n\t"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/99", "completion": "\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * This function takes two positive numbers x and y and returns the\n * biggest even integer number that is in the range [x, y] inclusive. If\n * there's no such number, then the function should return -1.\n\n * For example:\n * choose_num(12, 15) = 14\n * choose_num(13, 12) = -1\n *\n */\nfun chooseNum2(x: Int, y: Int): Int {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * This function takes two positive numbers x and y and returns the\n * biggest even integer number that is in the range [x, y] inclusive. If\n * there's no such number, then the function should return -1.\n\n * For example:\n * choose_num(12, 15) = 14\n * choose_num(13, 12) = -1\n *\n */\nfun chooseNum3(x: Int, y: Int): Int {\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/65", "completion": "//    val even = arr.filter { it % 2 == 0 }\n//    val minEven = even.min()\n//    val minEvenIndex = even.indexOf(minEven)\n//    return listOf(minEven, minEvenIndex)\n    return arr.filter { it % 2 == 0 }.minWith(compareBy({ it }, { it }))\n}\n\nfun main() {\n    println(pluck(listOf(4, 2, 3)))\n    println(pluck(listOf(1, 2, 3)))\n    println(pluck(listOf(5, 0, 3, 0, 4, 2)))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/158", "completion": "\tvar result = \"\"\n\tfor (i in s.indices) {\n\t\tif (s[i].isLetter()) {\n\t\t\tresult += if (s[i].isLowerCase()) s[i].toUpperCase() else s[i].toLowerCase()\n\t\t} else {\n\t\t\tresult += s[i]\n\t\t}\n\t}\n\treturn if (result.isEmpty()) result else result.reversed()\n}\n\nfun main() {\n\tprintln(solve(\"1234\"))\n\tprintln(solve(\"ab\"))\n\tprintln(solve(\"#a@C\"))\n}\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/106", "completion": "\tif (arr.isEmpty()) return true\n\tvar count = 0\n\tfor (i in 0 until arr.size) {\n\t\tif (arr[i]!= i + 1) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count <= 2\n}\n\nfun main() {\n\tprintln(moveOneBall(listOf(3, 4, 5, 1, 2)))\n\tprintln(moveOneBall(listOf(3, 5, 4, 1, 2)))\n}\n\n/**\n * 1. 100% Accepted\n * 2. 100% Submissions\n * 3. 100% Runtime\n * 4. 100% Memory\n */\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/58", "completion": "\tvar stack = Stack<Char>()\n\tfor (c in brackets) {\n\t\tif (c == '(') {\n\t\t\tstack.push(c)\n\t\t} else {\n\t\t\tif (stack.isEmpty()) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tstack.pop()\n\t\t}\n\t}\n\treturn stack.isEmpty()\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * brackets is a string of \"(\" and \")\".\n * return True if every opening bracket has a corresponding closing bracket.\n\n * >>> correct_bracketing(\"(\")\n * False\n * >>> correct_bracketing(\"()\")\n * True\n * >>> correct_bracketing(\"(()())\")\n * True\n * >>> correct_bracketing(\")(()\")\n * False\n *\n */\nfun correctBracketing3(brackets: String): Boolean {\n\tvar stack = Stack<Char>()\n\tfor (c in brackets) {\n\t\tif (c == '(') {\n\t\t\tstack.push(c)\n\t\t} else {\n\t\t\tif (stack.isEmpty()) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tif (stack.peek()!="}
{"language": "kotlin", "task_id": "HumanEval_kotlin/67", "completion": "\tval sorted = mutableListOf<Int>()\n\tvar min = lst.min()!!\n\tvar max = lst.max()!!\n\twhile (lst.isNotEmpty()) {\n\t\tsorted.add(min)\n\t\tsorted.add(max)\n\t\tmin = lst.min()!!\n\t\tmax = lst.max()!!\n\t\tlst.remove(min)\n\t\tlst.remove(max)\n\t}\n\treturn sorted\n}\n\nfun main() {\n\tprintln(strangeSortList(listOf(1, 2, 3, 4)))\n\tprintln(strangeSortList(listOf(5, 5, 5, 5)))\n\tprintln(strangeSortList(listOf()))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/154", "completion": "\treturn a*a + b*b == c*c\n}\n\nfun main(args: Array<String>) {\n\tprintln(rightAngleTriangle(3, 4, 5))\n\tprintln(rightAngleTriangle(1, 2, 3))\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Given the lengths of the three sides of a triangle. Return True if the three\n * sides form a right-angled triangle, False otherwise.\n * A right-angled triangle is a triangle in which one angle is right angle or \n * 90 degree.\n * Example:\n * right_angle_triangle(3, 4, 5) == True\n * right_angle_triangle(1, 2, 3) == False\n *\n */\nfun rightAngleTriangle(a : Int, b : Int, c : Int) : Boolean {\n\treturn a*a + b*b == c*c\n}\n\nfun main(args: Array<String>) {\n\tprintln(rightAngleTriangle(3, 4, 5))\n\tprintln(rightAngleTriangle(1, "}
{"language": "kotlin", "task_id": "HumanEval_kotlin/113", "completion": "//    val sorted = arr.sortedBy { it.countBits() }\n//    return sorted.sortedBy { it }\n    return arr.sortedBy { it.countBits() }.sortedBy { it }\n}\n\nfun Int.countBits(): Int {\n    var count = 0\n    var temp = this\n    while (temp > 0) {\n        count++\n        temp = temp shr 1\n    }\n    return count\n}\n\nfun main() {\n    println(sortArrayByBinary(listOf(1, 5, 2, 3, 4)))\n    println(sortArrayByBinary(listOf(-2, -3, -4, -5, -6)))\n    println(sortArrayByBinary(listOf(1, 0, 2, 3, 4)))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/124", "completion": "\tval start = max(interval1[0], interval2[0])\n\tval end = min(interval1[1], interval2[1])\n\tif (start > end) return \"NO\"\n\treturn if (isPrime(end - start + 1)) \"YES\" else \"NO\"\n}\n\nfun isPrime(n: Int): Boolean {\n\tif (n <= 1) return false\n\tif (n <= 3) return true\n\tif (n % 2 == 0 || n % 3 == 0) return false\n\tvar i = 5\n\twhile (i * i <= n) {\n\t\tif (n % i == 0 || n % (i + 2) == 0) return false\n\t\ti += 6\n\t}\n\treturn true\n}\n\nfun main(args: Array<String>) {\n\tprintln(intersection(listOf(1, 2), listOf(2, 3)))\n\tprintln(intersection(listOf(-1, 1), listOf(0, 4)))\n\tprintln(intersection(listOf(-3, -1), listOf(-5, 5)))\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/71", "completion": "\treturn lst1.filter { it.length < lst2.filter { it.length < it.length }.sumBy { it.length } }\n}\n\nfun main() {\n\tprintln(totalMatch(listOf(), listOf()))\n\tprintln(totalMatch(listOf(\"hi\", \"admin\"), listOf(\"hI\", \"Hi\")))\n\tprintln(totalMatch(listOf(\"hi\", \"admin\"), listOf(\"hi\", \"hi\", \"admin\", \"project\")))\n\tprintln(totalMatch(listOf(\"hi\", \"admin\"), listOf(\"hI\", \"hi\", \"hi\")))\n\tprintln(totalMatch(listOf(\"4\"), listOf(\"1\", \"2\", \"3\", \"4\", \"5\")))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/0", "completion": "\tvar result = false\n\tfor (i in 0 until numbers.size) {\n\t\tfor (j in i + 1 until numbers.size) {\n\t\t\tif (Math.abs(numbers[i] - numbers[j]) < threshold) {\n\t\t\t\tresult = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\treturn result\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Check if in the given list of numbers, there are any two numbers closer to each other than\n * the given threshold.\n * >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n * False\n * >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n * True\n *\n */\nfun hasCloseElements2(numbers: List<Double>, threshold: Double): Boolean {\n\tvar result = false\n\tfor (i in 0 until numbers.size) {\n\t\tfor (j in i + 1 until numbers"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/100", "completion": "\tif (n > m) return \"-1\"\n\tval sum = (n + m) * (m - n + 1) / 2\n\tval avg = sum / (m - n + 1)\n\treturn Integer.toBinaryString(avg)\n}\n\nfun main(args: Array<String>) {\n\tprintln(roundedAvg(1, 5))\n\tprintln(roundedAvg(7, 5))\n\tprintln(roundedAvg(10, 20))\n\tprintln(roundedAvg(20, 33))\n}\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/70", "completion": "\tval n = arr.size\n\tval dp = Array(n) { IntArray(n) { 0 } }\n\tfor (i in 0 until n) {\n\t\tdp[i][i] = 0\n\t}\n\tfor (i in 0 until n - 1) {\n\t\tif (arr[i] == arr[i + 1]) {\n\t\t\tdp[i][i + 1] = 1\n\t\t} else {\n\t\t\tdp[i][i + 1] = 2\n\t\t}\n\t}\n\tfor (i in 2 until n) {\n\t\tfor (j in 0 until n - i) {\n\t\t\tif (arr[j] == arr[j + i]) {\n\t\t\t\tdp[j][j + i] = dp[j + 1][j + i - 1]\n\t\t\t} else {\n\t\t\t\tdp[j][j + i] = minOf(dp[j + 1][j + i], dp[j][j + i - 1]) + 2\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[0][n - 1]"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/81", "completion": "//    val binary = n.toString(2)\n//    val sum = binary.sumOf { it.digitToInt() }\n//    return sum.toString()\n    var sum = 0\n    while (n > 0) {\n        sum += n % 2\n        n /= 2\n    }\n    return sum.toString()\n}\n\nfun main(args: Array<String>) {\n    println(solve(1000))\n}\n\nfun Int.sumOf(block: (Char) -> Int): Int {\n    var sum = 0\n    for (i in this.toString().toCharArray()) {\n        sum += block(i)\n    }\n    return sum\n}\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/78", "completion": "\tval letterGrades = mutableListOf<String>()\n\tfor (grade in grades) {\n\t\twhen {\n\t\t\tgrade >= 4.0 -> letterGrades.add(\"A+\")\n\t\t\tgrade >= 3.7 -> letterGrades.add(\"A\")\n\t\t\tgrade >= 3.3 -> letterGrades.add(\"A-\")\n\t\t\tgrade >= 3.0 -> letterGrades.add(\"B+\")\n\t\t\tgrade >= 2.7 -> letterGrades.add(\"B\")\n\t\t\tgrade >= 2.3 -> letterGrades.add(\"B-\")\n\t\t\tgrade >= 2.0 -> letterGrades.add(\"C+\")\n\t\t\tgrade >= 1.7 -> letterGrades.add(\"C\")\n\t\t\tgrade >= 1.3 -> letterGrades.add(\"C-\")\n\t\t\tgrade >= 1.0 -> letterGrades.add(\"D+\")\n\t\t\tgrade >= 0.7 -> letterGrades.add(\"D\")\n\t\t\tgrade >= 0.0 -> letterGrades.add(\"D-\")\n\t\t\telse -> letterGrades.add(\"E\")\n\t\t}\n\t}\n\treturn letterGr"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/54", "completion": "\tif (l.isEmpty()) return true\n\tvar prev = l[0]\n\tfor (i in 1 until l.size) {\n\t\tif (l[i] > prev) {\n\t\t\tprev = l[i]\n\t\t} else if (l[i] < prev) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return True is list elements are monotonically increasing or decreasing.\n * >>> monotonic([1, 2, 4, 20])\n * True\n * >>> monotonic([1, 20, 4, 10])\n * False\n * >>> monotonic([4, 1, 0, -10])\n * True\n *\n */\nfun monotonic(l: List<Int>): Boolean {\n\tif (l.isEmpty()) return true\n\tvar prev = l[0]\n\tfor (i in 1 until l.size) {\n\t\tif (l[i] > prev) {\n\t\t\tprev = l[i]\n\t\t} else if ("}
{"language": "kotlin", "task_id": "HumanEval_kotlin/94", "completion": "//    return a * b % 10\n//    return a * b % 100\n//    return a * b % 1000\n//    return a * b % 10000\n//    return a * b % 100000\n//    return a * b % 1000000\n//    return a * b % 10000000\n//    return a * b % 100000000\n//    return a * b % 1000000000\n//    return a * b % 10000000000\n//    return a * b % 100000000000\n//    return a * b % 1000000000000\n//    return a * b % 10000000000000\n//    return a * b % 100000000000000\n//    return a * b % 100"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/79", "completion": "//    TODO(\"Not yet implemented\")\n    return false\n}\n\nfun main(args: Array<String>) {\n    println(primeLength(\"Hello\"))\n    println(primeLength(\"abcdcba\"))\n    println(primeLength(\"kittens\"))\n    println(primeLength(\"orange\"))\n}\n\nfun isPrime(n: Int): Boolean {\n    if (n <= 1) return false\n    if (n <= 3) return true\n    if (n % 2 == 0 || n % 3 == 0) return false\n    var i = 5\n    while (i * i <= n) {\n        if (n % i == 0 || n % (i + 2) == 0) return false\n        i += 6\n    }\n    return true\n}\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/140", "completion": "\tval words = sentence.split(\" \")\n\tval result = mutableListOf<String>()\n\tfor (word in words) {\n\t\tif (isPrime(word.length)) {\n\t\t\tresult.add(word)\n\t\t}\n\t}\n\treturn result.joinToString(\" \")\n}\n\nfun isPrime(n : Int) : Boolean {\n\tif (n <= 1) return false\n\tif (n <= 3) return true\n\tif (n % 2 == 0 || n % 3 == 0) return false\n\tvar i = 5\n\twhile (i * i <= n) {\n\t\tif (n % i == 0 || n % (i + 2) == 0) return false\n\t\ti += 6\n\t}\n\treturn true\n}\n\nfun main() {\n\tprintln(wordsInSentence(\"This is a test\"))\n\tprintln(wordsInSentence(\"lets go for swimming\"))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/127", "completion": "\tval result = mutableListOf<Int>()\n\tresult.add(1)\n\tresult.add(3)\n\tresult.add(2)\n\tvar i = 3\n\twhile (i <= n) {\n\t\tif (i % 2 == 0) {\n\t\t\tresult.add(i / 2)\n\t\t} else {\n\t\t\tresult.add(result[i - 1] + result[i - 2] + result[i + 1])\n\t\t}\n\t\ti++\n\t}\n\treturn result\n}\n\nfun main(args: Array<String>) {\n\tprintln(tri(3))\n}\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/133", "completion": "\tvar max = Int.MIN_VALUE\n\tvar min = Int.MAX_VALUE\n\tfor (i in lst) {\n\t\tif (i > max) {\n\t\t\tmax = i\n\t\t}\n\t\tif (i < min) {\n\t\t\tmin = i\n\t\t}\n\t}\n\treturn listOf(max, min)\n}\n\nfun main(args: Array<String>) {\n\tprintln(largestSmallestIntegers(listOf(2, 4, 1, 3, 5, 7)))\n\tprintln(largestSmallestIntegers(listOf()))\n\tprintln(largestSmallestIntegers(listOf(0)))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/18", "completion": "\tvar count = 0\n\tvar index = string.indexOf(substring)\n\twhile (index!= -1) {\n\t\tcount++\n\t\tindex = string.indexOf(substring, index + substring.length)\n\t}\n\treturn count\n}\n\nfun main(args: Array<String>) {\n\tprintln(howManyTimes(\"\", \"a\"))\n\tprintln(howManyTimes(\"aaa\", \"a\"))\n\tprintln(howManyTimes(\"aaaa\", \"aa\"))\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Find how many times a given substring can be found in the original string. Count overlaping cases.\n * >>> how_many_times('', 'a')\n * 0\n * >>> how_many_times('aaa', 'a')\n * 3\n * >>> how_many_times('aaaa', 'aa')\n * 3\n *\n */\nfun howManyTimes(string: String, substring: String): Int {\n\tvar count = 0\n\tvar index = string.indexOf(substring)\n\twhile (index!= -1) {\n\t\tcount++\n\t\tindex = string"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/159", "completion": "\treturn text.toByteArray().contentHashCode().toString()\n}\n\nfun main(args : Array<String>) {\n\tprintln(stringToMd5(\"Hello world\"))\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Given a string 'text', return its sha1 hash equivalent string.\n * If 'text' is an empty string, return.\n\n * >>> string_to_sha1('Hello world') == '2fd4e1c67a2d28fced849ee1bb76e7391b93eb12'\n *\n */\nfun stringToSha1(text : String) : String? {\n\treturn text.toByteArray().contentHashCode().toString()\n}\n\nfun main(args : Array<String>) {\n\tprintln(stringToSha1(\"Hello world\"))\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Given a string 'text', return its sha256 hash equivalent string.\n * If 'text' is an empty string, return.\n\n * >>> string_to_sha25"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/118", "completion": "\tvar sum = 0\n\tfor (i in 0 until lst.size step 2) {\n\t\tif (lst[i] % 2!= 0) {\n\t\t\tsum += lst[i]\n\t\t}\n\t}\n\treturn sum\n}\n\nfun main(args: Array<String>) {\n\tprintln(solution(listOf(5, 8, 7, 1)))\n\tprintln(solution(listOf(3, 3, 3, 3, 3)))\n\tprintln(solution(listOf(30, 13, 24, 321)))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/33", "completion": "\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return sorted unique elements in a list\n * >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [0, 2, 3, 5, 9, 123]\n *\n */\nfun unique(l: List<Int>): List<Int> {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return sorted unique elements in a list\n * >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n * [0, 2, 3, 5, 9, 123]\n *\n */\nfun unique(l: List<Int>): List<Int> {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return sorted unique elements in a list\n * >>> unique([5, 3, 5, 2, 3,"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/153", "completion": "\tval roman = mutableListOf<String>()\n\tval romanMap = mapOf(\n\t\t1000 to \"m\",\n\t\t900 to \"cm\",\n\t\t500 to \"d\",\n\t\t400 to \"cd\",\n\t\t100 to \"c\",\n\t\t90 to \"xc\",\n\t\t50 to \"l\",\n\t\t40 to \"xl\",\n\t\t10 to \"x\",\n\t\t9 to \"ix\",\n\t\t5 to \"v\",\n\t\t4 to \"iv\",\n\t\t1 to \"i\"\n\t)\n\n\tfor (entry in romanMap) {\n\t\tval count = number / entry.key\n\t\tif (count > 0) {\n\t\t\tfor (i in 1..count) {\n\t\t\t\troman.add(entry.value)\n\t\t\t}\n\t\t\tnumber -= entry.key * count\n\t\t}\n\t}\n\n\treturn roman.joinToString(\"\")\n}\n\nfun main() {\n\tprintln(intToMiniRoman(19))\n\tprintln(intToMiniRoman(152))\n\tprintln(intToMiniRoman(426))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/123", "completion": "\tvar sorted = true\n\tvar previous = lst[0]\n\tfor (i in 1 until lst.size) {\n\t\tif (lst[i] < previous) {\n\t\t\tsorted = false\n\t\t\tbreak\n\t\t}\n\t\tprevious = lst[i]\n\t}\n\treturn sorted\n}\n\nfun main(args : Array<String>) {\n\tprintln(isSorted(listOf(5)))\n\tprintln(isSorted(listOf(1, 2, 3, 4, 5)))\n\tprintln(isSorted(listOf(1, 3, 2, 4, 5)))\n\tprintln(isSorted(listOf(1, 2, 3, 4, 5, 6)))\n\tprintln(isSorted(listOf(1, 2, 3, 4, 5, 6, 7)))\n\tprintln(isSorted(listOf(1, 3, 2, 4, 5, 6, 7)))\n\tprintln(isSorted(listOf(1, 2, 2, 3, 3, 4)))\n\tprintln(isSorted(listOf("}
{"language": "kotlin", "task_id": "HumanEval_kotlin/20", "completion": "\tval min = numbers.minOrNull()!!\n\tval max = numbers.maxOrNull()!!\n\tval minIndex = numbers.indexOf(min)\n\tval maxIndex = numbers.indexOf(max)\n\treturn if (minIndex < maxIndex) {\n\t\tlistOf(min, max)\n\t} else {\n\t\tlistOf(max, min)\n\t}\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n * other and return them in order (smaller number, larger number).\n * >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n * (2.0, 2.2)\n * >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n * (2.0, 2.0)\n *\n */\nfun findClosestElements2(numbers: List<"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/53", "completion": "\tvar stack = Stack<Char>()\n\tfor (c in brackets) {\n\t\tif (c == '<') {\n\t\t\tstack.push(c)\n\t\t} else if (c == '>') {\n\t\t\tif (stack.isEmpty()) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tstack.pop()\n\t\t}\n\t}\n\treturn stack.isEmpty()\n}\n\nfun main(args: Array<String>) {\n\tprintln(correctBracketing(\"<\"))\n\tprintln(correctBracketing(\"<>\"))\n\tprintln(correctBracketing(\"<<><>>\"))\n\tprintln(correctBracketing(\"><<>\"))\n}\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/130", "completion": "\tvar sum = 0\n\tfor (i in lst) {\n\t\tsum += Math.ceil(i).toInt().pow(2)\n\t}\n\treturn sum\n}\n\nfun main(args: Array<String>) {\n\tprintln(sumSquares(listOf(1.4, 4.2, 0.0)))\n}\n\n//https://www.codewars.com/kata/585465666666666666666666/train/kotlin\n//https://www.codewars.com/kata/585465666666666666666666/solutions/kotlin"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/39", "completion": "\tvar count = 0\n\tvar left = 0\n\tvar right = 0\n\twhile (left < n && right < n) {\n\t\tif (left == right) {\n\t\t\tleft++\n\t\t\tright++\n\t\t} else if (left < right) {\n\t\t\tleft++\n\t\t} else {\n\t\t\tright++\n\t\t}\n\t\tif (left == right) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\nfun main(args: Array<String>) {\n\tprintln(carRaceCollision(10))\n}\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/13", "completion": "//    TODO(\"Not yet implemented\")\n    return a.gcd(b)\n}\n\nfun Int.gcd(other: Int): Int {\n    if (other == 0) return this\n    return gcd(other, this % other)\n}\n\nfun main(args: Array<String>) {\n    println(greatestCommonDivisor(3, 5))\n    println(greatestCommonDivisor(25, 15))\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return a least common multiple of two integers a and b\n * >>> least_common_multiple(3, 5)\n * 15\n * >>> least_common_multiple(25, 15)\n * 75\n *\n */\nfun leastCommonMultiple(a: Int, b: Int): Int {\n//    TODO(\"Not yet implemented\")\n    return a.lcm(b)\n}\n\nfun Int.lcm(other: Int): Int {\n    return this * other / gcd(this, other)\n}\n\nfun main(args: Array<String>) {\n    println(leastCommonMultiple(3"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/104", "completion": "\n}\n\nfun main(args: Array<String>) {\n    println(evenOddPalindrome(3))\n}\n\nfun evenOddPalindrome2(n : Int) : List<Int> {\n    var even = 0\n    var odd = 0\n    for (i in 1..n) {\n        if (isPalindrome(i)) {\n            if (i % 2 == 0) {\n                even++\n            } else {\n                odd++\n            }\n        }\n    }\n    return listOf(even, odd)\n}\n\nfun isPalindrome(n : Int) : Boolean {\n    var num = n\n    var rev = 0\n    while (num > 0) {\n        rev = rev * 10 + num % 10\n        num /= 10\n    }\n    return n == rev\n}\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/56", "completion": "\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n * >>> smallest_prime_factor(13195)\n * 5\n * >>> smallest_prime_factor(2048)\n * 2\n *\n */\nfun smallestPrimeFactor(n: Int): Int {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return the sum of all prime factors of n. Assume n > 1 and is not a prime.\n * >>> sum_of_prime_factors(13195)\n * 29\n * >>> sum_of_prime_factors(2048)\n * 2\n *\n */\nfun sumOfPrimeFactors(n: Int): Int {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return the largest prime factor of n. Assume n > 1 and is not a prime.\n * >>> largest_prime_factor(13195)\n *"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/1", "completion": "\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n * separate those groups into separate strings and return the list of those.\n * Separate groups are balanced (each open brace is properly closed) and not nested within each other\n * Ignore any spaces in the input string.\n * >>> separate_paren_groups('( ) (( )) (( )( ))')\n * ['()', '(())', '(()())']\n *\n */\nfun separateParenGroups(parenString: String): List<String> {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n * separate those groups into separate strings and return the list of those.\n * Separate groups are balanced (each open brace is properly closed) and not nested within each other\n * Ignore any spaces in the input string.\n * >>> separate_paren_groups('( ) (( )) (( )( ))')\n * ['()', '(())', '(()())']\n *\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/66", "completion": "\tvar max = 0\n\tvar count = 0\n\tfor (i in lst) {\n\t\tif (i > max) {\n\t\t\tmax = i\n\t\t\tcount = 1\n\t\t} else if (i == max) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn if (count >= max) max else -1\n}\n\nfun main() {\n\tprintln(search(listOf(4, 1, 2, 2, 3, 1)))\n\tprintln(search(listOf(1, 2, 2, 3, 3, 3, 4, 4, 4)))\n\tprintln(search(listOf(5, 5, 4, 4, 4)))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/151", "completion": "\tif (a.length < b.length) return false\n\tvar i = 0\n\twhile (i < b.length) {\n\t\tif (a.indexOf(b.substring(i), i) == -1) return false\n\t\ti++\n\t}\n\treturn true\n}\n\nfun main(args: Array<String>) {\n\tprintln(cycpatternCheck(\"abcd\",\"abd\"))\n\tprintln(cycpatternCheck(\"hello\",\"ell\"))\n\tprintln(cycpatternCheck(\"whassup\",\"psus\"))\n\tprintln(cycpatternCheck(\"abab\",\"baa\"))\n\tprintln(cycpatternCheck(\"efef\",\"eeff\"))\n\tprintln(cycpatternCheck(\"himenss\",\"simen\"))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/122", "completion": "\treturn txt.split(\" \").map { it.split(\",\") }.flatten().map { it.toLowerCase() }.filter { it.length % 2 == 1 }.size\n}\n\nfun main(args : Array<String>) {\n\tprintln(splitWords(\"Hello world!\"))\n\tprintln(splitWords(\"Hello,world!\"))\n\tprintln(splitWords(\"abcdef\"))\n}\n\nfun main2(args : Array<String>) {\n\tprintln(splitWords(\"Hello world!\"))\n\tprintln(splitWords(\"Hello,world!\"))\n\tprintln(splitWords(\"abcdef\"))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/5", "completion": "\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Given a list of numbers, return the sum of all the numbers in the list.\n * >>> sum([])\n * 0\n * >>> sum([1, 2, 3])\n * 6\n *\n */\nfun sum(numbers: List<Int>): Int {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Given a list of numbers, return the product of all the numbers in the list.\n * >>> product([])\n * 1\n * >>> product([1, 2, 3])\n * 6\n *\n */\nfun product(numbers: List<Int>): Int {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Given a list of numbers, return the maximum number in the list.\n * >>> max([])\n * -Infinity\n * >>> max([1, 2, 3])\n * 3\n *\n */\nfun max(numbers: List<Int>): Int {\n\n}\n\n/**\n * You are an expert Kotlin programmer"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/142", "completion": "\n}\n\nfun main(args: Array<String>) {\n    println(orderByPoints(listOf(1, 11, -1, -11, -12)))\n    println(orderByPoints(listOf()))\n}\n\nfun <T> List<T>.sortBy(selector: (T) -> Int) : List<T> {\n    val sorted = mutableListOf<T>()\n    val sortedMap = mutableMapOf<Int, MutableList<T>>()\n    forEach {\n        val key = selector(it)\n        sortedMap.getOrPut(key) { mutableListOf() }.add(it)\n    }\n    sortedMap.values.forEach {\n        sorted.addAll(it)\n    }\n    return sorted\n}\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/48", "completion": "//    TODO(\"Not yet implemented\")\n    return text.filter { it!in \"aeiouAEIOU\" }\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * * remove_vowels_2 is a function that takes string and returns string without vowels.\n * >>> remove_vowels_2('')\n * ''\n * >>> remove_vowels_2(\"abcdef\\nghijklm\")\n * 'bcdf\\nghjklm'\n * >>> remove_vowels_2('abcdef')\n * 'bcdf'\n * >>> remove_vowels_2('aaaaa')\n * ''\n * >>> remove_vowels_2('aaBAA')\n * 'B'\n * >>> remove_vowels_2('zbcd')\n * 'zbcd'\n *\n */\nfun removeVowels2(text: String): String {\n//    TODO(\"Not yet implemented\")\n    return text.filterNot { it in \"aeiouAEIOU\" }\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * *"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/155", "completion": "\tvar max = \"\"\n\tvar maxCount = 0\n\tfor (word in words) {\n\t\tval count = word.toSet().size\n\t\tif (count > maxCount) {\n\t\t\tmax = word\n\t\t\tmaxCount = count\n\t\t}\n\t}\n\treturn max\n}\n\nfun main(args: Array<String>) {\n\tprintln(findMax(listOf(\"name\", \"of\", \"string\")))\n\tprintln(findMax(listOf(\"name\", \"enam\", \"game\")))\n\tprintln(findMax(listOf(\"aaaaaaa\", \"bb\",\"cc\")))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/125", "completion": "\tif (arr.isEmpty()) return null\n\tvar sum = 0\n\tvar prod = 1\n\tfor (i in arr) {\n\t\tsum += Math.abs(i)\n\t\tprod *= i.sign\n\t}\n\treturn sum * prod\n}\n\nfun main(args: Array<String>) {\n\tprintln(prodSigns(listOf(1, 2, 2, -4)))\n\tprintln(prodSigns(listOf(0, 1)))\n\tprintln(prodSigns(listOf()))\n}\n\n/**\n * You are given a list of integers and you need to return\n * sum of magnitudes of integers multiplied by product of all signs\n * of each number in the list, represented by 1, -1 or 0.\n * Note: return  for empty list.\n\n * Example:\n * >>> prod_signs([1, 2, 2, -4]) == -9\n * >>> prod_signs([0, 1]) == 0\n * >>> prod_signs([]) == None\n *\n */\nfun prodSigns(arr : List<Int>) : Int? {\n\t"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/149", "completion": "\tval result = mutableListOf<Int>()\n\tfor (i in game.indices) {\n\t\tresult.add(Math.abs(game[i] - guess[i]))\n\t}\n\treturn result\n}\n\nfun main(args: Array<String>) {\n\tprintln(compare(listOf(1,2,3,4,5,1), listOf(1,2,3,4,2,-2)))\n\tprintln(compare(listOf(0,5,0,0,0,4), listOf(4,1,1,0,0,-2)))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/139", "completion": "\tvar sum = 0\n\tfor (i in 0 until lst.size) {\n\t\tif (i % 3 == 0) {\n\t\t\tsum += lst[i] * lst[i]\n\t\t} else if (i % 4 == 0 && i % 3!= 0) {\n\t\t\tsum += lst[i] * lst[i] * lst[i]\n\t\t}\n\t}\n\treturn sum\n}\n\nfun main(args: Array<String>) {\n\tprintln(sumSquares(listOf(1,2,3)))\n\tprintln(sumSquares(listOf()))\n\tprintln(sumSquares(listOf(-1,-5,2,-1,-5)))\n}\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/131", "completion": "\treturn txt.last().isLetter() && txt.last().isLowerCase()\n}\n\nfun main() {\n\tprintln(checkIfLastCharIsALetter(\"apple pie\"))\n\tprintln(checkIfLastCharIsALetter(\"apple pi e\"))\n\tprintln(checkIfLastCharIsALetter(\"apple pi e \"))\n\tprintln(checkIfLastCharIsALetter(\"\"))\n}\n\nfun String.last(): Char {\n\treturn this[this.length - 1]\n}\n\nfun Char.isLetter(): Boolean {\n\treturn this in 'a'..'z' || this in 'A'..'Z'\n}\n\nfun Char.isLowerCase(): Boolean {\n\treturn this in 'a'..'z'\n}\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/156", "completion": "\treturn listOf(number + need, remaining - need)\n}\n\nfun main(args : Array<String>) {\n\tprintln(eat(5, 6, 10))\n\tprintln(eat(4, 8, 9))\n\tprintln(eat(1, 10, 10))\n\tprintln(eat(2, 11, 5))\n}\n\n// 11, 4\n// 12, 1\n// 11, 0\n// 7, 0\n\n// 11, 4\n// 12, 1\n// 11, 0\n// 7, 0\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/41", "completion": "\tval map = mutableMapOf<Int, Int>()\n\tfor (i in l) {\n\t\tval complement = -i\n\t\tif (map.containsKey(complement)) {\n\t\t\treturn true\n\t\t}\n\t\tmap[i] = i\n\t}\n\treturn false\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * * pairs_sum_to_zero takes a list of integers as an input.\n * it returns True if there are two distinct elements in the list that\n * sum to zero, and False otherwise.\n * >>> pairs_sum_to_zero([1, 3, 5, 0])\n * False\n * >>> pairs_sum_to_zero([1, 3, -2, 1])\n * False\n * >>> pairs_sum_to_zero([1, 2, 3, 7])\n * False\n * >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n * True\n * >>> pairs_sum_to_zero([1])\n * False\n *\n */\nfun pairsSumTo"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/110", "completion": "\treturn lst.map {\n\t\tit.count { it.isDigit() && it.toInt() % 2 == 1 }.toString() + \"n the str\" + it.length + \"ng \" + it.length + \" of the \" + it.length + \"nput.\"\n\t}\n}\n\nfun main(args: Array<String>) {\n\tprintln(oddCount(listOf(\"1234567\")))\n\tprintln(oddCount(listOf(\"3\",\"11111111\")))\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Given a list of strings, where each string consists of only digits, return a list.\n * Each element i of the output should be \"the number of odd elements in the\n * string i of the input.\" where all the i's should be replaced by the number\n * of odd digits in the i'th string of the input.\n\n * >>> odd_count(['1234567'])\n * [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n * >>> odd_count(['3"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/28", "completion": "\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Concatenate list of strings into a single string\n * >>> concatenate([])\n * ''\n * >>> concatenate(['a', 'b', 'c'])\n * 'abc'\n *\n */\nfun concatenate(strings: List<String>): String {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Concatenate list of strings into a single string\n * >>> concatenate([])\n * ''\n * >>> concatenate(['a', 'b', 'c'])\n * 'abc'\n *\n */\nfun concatenate(strings: List<String>): String {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Concatenate list of strings into a single string\n * >>> concatenate([])\n * ''\n * >>> concatenate(['a', 'b', 'c'])\n * 'abc'\n *\n */\nfun concatenate(strings: List<String>): String {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Concatenate list of strings into a single string\n * >>>"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/114", "completion": "\tval words = mutableListOf<String>()\n\tval consonants = \"bcdfghjklmnpqrstvwxyz\"\n\tvar count = 0\n\tvar word = \"\"\n\tfor (i in s.indices) {\n\t\tif (consonants.contains(s[i])) {\n\t\t\tcount++\n\t\t\tword += s[i]\n\t\t} else {\n\t\t\tif (count == n) {\n\t\t\t\twords.add(word)\n\t\t\t}\n\t\t\tcount = 0\n\t\t\tword = \"\"\n\t\t}\n\t}\n\treturn words\n}\n\nfun main(args : Array<String>) {\n\tprintln(selectWords(\"Mary had a little lamb\", 4))\n\tprintln(selectWords(\"Mary had a little lamb\", 3))\n\tprintln(selectWords(\"simple white space\", 2))\n\tprintln(selectWords(\"Hello world\", 4))\n\tprintln(selectWords(\"Uncle sam\", 3))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/45", "completion": "\tval sorted = l.sorted()\n\tval size = sorted.size\n\treturn if (size % 2 == 0) {\n\t\t(sorted[size / 2 - 1] + sorted[size / 2]) / 2.0\n\t} else {\n\t\tsorted[size / 2]\n\t}\n}\n\nfun main(args: Array<String>) {\n\tprintln(median(listOf(3, 1, 2, 4, 5)))\n\tprintln(median(listOf(-10, 4, 6, 1000, 10, 20)))\n}\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/116", "completion": "\tval stack = Stack<Char>()\n\tfor (s in lst) {\n\t\tfor (c in s) {\n\t\t\tif (c == '(') {\n\t\t\t\tstack.push(c)\n\t\t\t} else {\n\t\t\t\tif (stack.isEmpty()) {\n\t\t\t\t\treturn \"No\"\n\t\t\t\t} else {\n\t\t\t\t\tstack.pop()\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn if (stack.isEmpty()) \"Yes\" else \"No\"\n}\n\nfun main(args: Array<String>) {\n\tprintln(matchParens(listOf(\"()(\", \")\")))\n\tprintln(matchParens(listOf(\")\", \")\")))\n}\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/147", "completion": "\treturn if (isPrime(n)) x else y\n}\n\nfun isPrime(n : Int) : Boolean {\n\tif (n <= 1) return false\n\tif (n <= 3) return true\n\tif (n % 2 == 0 || n % 3 == 0) return false\n\tvar i = 5\n\twhile (i * i <= n) {\n\t\tif (n % i == 0 || n % (i + 2) == 0) return false\n\t\ti += 6\n\t}\n\treturn true\n}\n\nfun main(args : Array<String>) {\n\tprintln(xOrY(7, 34, 12))\n\tprintln(xOrY(15, 8, 5))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/117", "completion": "\tval maxHeap = PriorityQueue<Int>(k)\n\tfor (i in arr) {\n\t\tif (maxHeap.size < k) {\n\t\t\tmaxHeap.add(i)\n\t\t} else {\n\t\t\tif (i > maxHeap.peek()) {\n\t\t\t\tmaxHeap.poll()\n\t\t\t\tmaxHeap.add(i)\n\t\t\t}\n\t\t}\n\t}\n\treturn maxHeap.toList()\n}\n\nfun main(args: Array<String>) {\n\tprintln(maximum(listOf(-3, -4, 5), 3))\n\tprintln(maximum(listOf(4, -4, 4), 2))\n\tprintln(maximum(listOf(-3, 2, 1, 2, -1, -2, 1), 1))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/109", "completion": "\tval result = StringBuilder()\n\tvar isPalindrome = true\n\tfor (i in s.indices) {\n\t\tif (!c.contains(s[i])) {\n\t\t\tresult.append(s[i])\n\t\t} else {\n\t\t\tisPalindrome = false\n\t\t}\n\t}\n\treturn Pair(result.toString(), isPalindrome)\n}\n\nfun main(args: Array<String>) {\n\tval s = \"abcde\"\n\tval c = \"ae\"\n\tval result = reverseDelete(s, c)\n\tprintln(result.first)\n\tprintln(result.second)\n}\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/112", "completion": "\tval n = grid.size\n\tval m = grid[0].size\n\tvar res = 0\n\tfor (i in 0 until n) {\n\t\tfor (j in 0 until m) {\n\t\t\tif (grid[i][j] == 1) {\n\t\t\t\tres += capacity - (i + j)\n\t\t\t}\n\t\t}\n\t}\n\treturn res\n}\n\nfun main() {\n\tval grid = listOf(listOf(0,0,1,0), listOf(0,1,0,0), listOf(1,1,1,1))\n\tval capacity = 1\n\tprintln(maxFill(grid, capacity))\n\tval grid2 = listOf(listOf(0,0,1,1), listOf(0,0,0,0), listOf(1,1,1,1), listOf(0,1,1,1))\n\tval capacity2 = 2\n\tprintln(maxFill(grid2, capacity2))\n\tval grid3 = listOf(listOf(0,0,0), listOf(0,0,0))\n\tval capacity3 = 5\n\tprintln(max"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/55", "completion": "//    TODO(\"Not yet implemented\")\n    return l1.intersect(l2).sorted()\n}\n\nfun main(args: Array<String>) {\n    println(common(listOf(1, 4, 3, 34, 653, 2, 5), listOf(5, 7, 1, 5, 9, 653, 121)))\n    println(common(listOf(5, 3, 2, 8), listOf(3, 2)))\n}\n\nfun <T> List<T>.intersect(other: List<T>): List<T> {\n    val result = mutableListOf<T>()\n    for (item in this) {\n        if (other.contains(item)) {\n            result.add(item)\n        }\n    }\n    return result\n}\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/36", "completion": "\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * This function takes a list l and returns a list l' such that\n * l' is identical to l in the odd indicies, while its values at the even indicies are equal\n * to the values of the even indicies of l, but sorted.\n * >>> sort_even([1, 2, 3])\n * [1, 2, 3]\n * >>> sort_even([5, 6, 3, 4])\n * [3, 6, 5, 4]\n *\n */\nfun sortEven(l: List<Int>): List<Int> {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * This function takes a list l and returns a list l' such that\n * l' is identical to l in the odd indicies, while its values at the even indicies are equal\n * to the values of the even indicies of l, but sorted.\n * >>> sort_even([1, 2, 3])\n * [1, 2, 3"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/68", "completion": "\treturn if (a + b > c && a + c > b && b + c > a) {\n\t\tMath.round(0.5 * (a + b + c) * Math.sqrt(a * b * c))\n\t} else {\n\t\t-1\n\t}\n}\n\nfun main(args: Array<String>) {\n\tprintln(triangleArea(3, 4, 5))\n\tprintln(triangleArea(1, 2, 10))\n}\n\n/**\n * You are given a list of integers.\n * * Write a function that returns the sum of all the even numbers in the list.\n * If the list is empty, return 0.\n * Example:\n * sum_even([1, 2, 3, 4, 5]) == 12\n * sum_even([1, 3, 5, 7]) == 0\n *\n */\nfun sumEven(numbers: List<Int>): Int {\n\tvar sum = 0\n\tfor (number in numbers) {\n\t\tif (number % 2 == 0) {\n\t\t\tsum += number\n\t\t}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/60", "completion": "\n}\n\nfun main(args: Array<String>) {\n    println(fibfib(1))\n    println(fibfib(5))\n    println(fibfib(8))\n}\n\n/**\n * 1. 递归\n * 2. 动态规划\n * 3. 位运算\n * 4. 数学公式\n * 5. 数学公式\n * 6. 数学公式\n * 7. 数学公式\n * 8. 数学公式\n * 9. 数学公式\n * 10. 数学公式\n * 11. 数学公式\n * 12. 数学公式\n * 13. 数学公式\n * 14. 数学公式\n * 15. 数学公式\n * 16. 数学公式\n * 17. 数学公式\n * 18. 数学公式\n * 19. 数学公式\n * 20. 数学公式\n * 21. "}
{"language": "kotlin", "task_id": "HumanEval_kotlin/101", "completion": "\n}\n\nfun main(args: Array<String>) {\n    println(uniqueDigits(listOf(15, 33, 1422, 1)))\n    println(uniqueDigits(listOf(152, 323, 1422, 10)))\n}\n\nfun main2(args: Array<String>) {\n    println(uniqueDigits(listOf(15, 33, 1422, 1)))\n    println(uniqueDigits(listOf(152, 323, 1422, 10)))\n}\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/19", "completion": "\tval numbersList = numbers.split(\" \")\n\tval numbersMap = mutableMapOf<String, Int>()\n\tnumbersList.forEach {\n\t\tnumbersMap[it] = it.toInt()\n\t}\n\tval sortedNumbers = numbersMap.keys.sortedBy { numbersMap[it] }\n\treturn sortedNumbers.joinToString(\" \")\n}\n\nfun main() {\n\tprintln(sortNumbers(\"three one five\"))\n}\n\nfun main2() {\n\tprintln(sortNumbers(\"three one five\"))\n}\n\nfun main3() {\n\tprintln(sortNumbers(\"three one five\"))\n}\n\nfun main4() {\n\tprintln(sortNumbers(\"three one five\"))\n}\n\nfun main5() {\n\tprintln(sortNumbers(\"three one five\"))\n}\n\nfun main6() {\n\tprintln(sortNumbers(\"three one five\"))\n}\n\nfun main7() {\n\tprintln(sortNumbers(\"three one five\"))\n}\n\nfun main8() {\n\tprintln(sortNumbers(\"three one five\"))\n}\n\nfun main9() {\n\tprintln(sortNumbers(\"three one five\"))\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/97", "completion": "\n}\n\nfun main() {\n    println(makeAPile(3))\n}\n\nfun makeAPile(n: Int): List<Int> {\n    val result = mutableListOf<Int>()\n    var current = n\n    while (current > 0) {\n        result.add(current)\n        current = if (current % 2 == 0) current / 2 else (current + 1)\n    }\n    return result\n}\n\nfun makeAPile(n: Int): List<Int> {\n    val result = mutableListOf<Int>()\n    var current = n\n    while (current > 0) {\n        result.add(current)\n        current = if (current % 2 == 0) current / 2 else (current + 1)\n    }\n    return result\n}\n\nfun makeAPile(n: Int): List<Int> {\n    val result = mutableListOf<Int>()\n    var current = n\n    while (current > 0) {\n        result.add(current)\n        current = if (current % 2 == 0) current / 2 else (current + 1)\n    }\n    return result\n}\n\nfun makeAPile"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/126", "completion": "\n}\n\nfun main(args : Array<String>) {\n    val grid = listOf(listOf(1,2,3), listOf(4,5,6), listOf(7,8,9))\n    val k = 3\n    println(minpath(grid, k))\n}\n\nfun minpath(grid : List<List<Int>>, k : Int) : List<Int> {\n    val n = grid.size\n    val dp = Array(n) { IntArray(n) { 0 } }\n    for (i in 0 until n) {\n        for (j in 0 until n) {\n            dp[i][j] = grid[i][j]\n        }\n    }\n    for (i in 1 until n) {\n        for (j in 1 until n) {\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        }\n    }\n    val path = mutableListOf<Int>()\n    var i = n-1\n    var j = n-1\n    while (i > 0 || j > 0) {\n        if (i == 0)"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/134", "completion": "\treturn when {\n\t\ta is Int && b is Int -> if (a > b) a else b\n\t\ta is Float && b is Float -> if (a > b) a else b\n\t\ta is String && b is String -> if (a > b) a else b\n\t\telse -> null\n\t}\n}\n\nfun main() {\n\tprintln(compareOne(1, 2.5))\n\tprintln(compareOne(1, \"2,3\"))\n\tprintln(compareOne(\"5,1\", \"6\"))\n\tprintln(compareOne(\"1\", 1))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/136", "completion": "\tvar result = 1L\n\tfor (i in 1..n) {\n\t\tresult *= i.factorial()\n\t}\n\treturn result\n}\n\nfun Long.factorial() : Long {\n\tvar result = 1L\n\tfor (i in 1..this) {\n\t\tresult *= i\n\t}\n\treturn result\n}\n\nfun main(args: Array<String>) {\n\tprintln(specialFactorial(4))\n}\n\n// 120\n// 288\n// 10080\n// 3628800\n// 39916800\n// 6227020800\n// 1307674368000\n// 3041409320089600\n// 806581751709440000\n// 2.4329020081766400000000000000000000"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/7", "completion": "//    TODO(\"Not yet implemented\")\n    return strings.filter { it.contains(substring) }\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Filter an input list of strings only for ones that contain given substring\n * >>> filter_by_substring([], 'a')\n * []\n * >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n * ['abc', 'bacd', 'array']\n *\n */\nfun filterBySubstring2(strings: List<String>, substring: String): List<String> {\n//    TODO(\"Not yet implemented\")\n    return strings.filter { it.contains(substring) }\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Filter an input list of strings only for ones that contain given substring\n * >>> filter_by_substring([], 'a')\n * []\n * >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n * ['abc', 'bacd', 'array']\n *\n */\nfun filterBySubstring3(strings: List<"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/47", "completion": "\tvar result = 1\n\tvar base = 2\n\twhile (n > 0) {\n\t\tif (n % 2 == 1) {\n\t\t\tresult = (result * base) % p\n\t\t}\n\t\tbase = (base * base) % p\n\t\tn /= 2\n\t}\n\treturn result\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return 2^n modulo p (be aware of numerics).\n * >>> modp(3, 5)\n * 3\n * >>> modp(1101, 101)\n * 2\n * >>> modp(0, 101)\n * 1\n * >>> modp(3, 11)\n * 8\n * >>> modp(100, 101)\n * 1\n *\n */\nfun modp(n: Long, p: Long): Long {\n\tvar result = 1L\n\tvar base = 2L\n\twhile (n > 0) {\n\t\tif (n % 2 == 1L) {"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/8", "completion": "//    TODO(\"Not yet implemented\")\n    return listOf(numbers.sum(), numbers.fold(1, Int::times))\n}\n\nfun main(args: Array<String>) {\n    println(sumProduct(listOf(1, 2, 3, 4)))\n}\n\nfun sumProduct(numbers: List<Int>): List<Int> {\n    return listOf(numbers.sum(), numbers.fold(1, Int::times))\n}\n\nfun main(args: Array<String>) {\n    println(sumProduct(listOf(1, 2, 3, 4)))\n}\n\nfun sumProduct(numbers: List<Int>): List<Int> {\n    return listOf(numbers.sum(), numbers.fold(1, Int::times))\n}\n\nfun main(args: Array<String>) {\n    println(sumProduct(listOf(1, 2, 3, 4)))\n}\n\nfun sumProduct(numbers: List<Int>): List<Int> {\n    return listOf(numbers.sum(), numbers.fold(1, Int::times))\n}\n\nfun main(args: Array<String>) {\n    println(sumProduct("}
{"language": "kotlin", "task_id": "HumanEval_kotlin/25", "completion": "\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return list of prime factors of given integer in the order from smallest to largest.\n * Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n * Input number should be equal to the product of all factors\n * >>> factorize(8)\n * [2, 2, 2]\n * >>> factorize(25)\n * [5, 5]\n * >>> factorize(70)\n * [2, 5, 7]\n *\n */\nfun factorize(n: Int): List<Int> {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return list of prime factors of given integer in the order from smallest to largest.\n * Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n * Input number should be equal to the product of all factors\n * >>> factorize(8)\n * [2, 2, 2]\n * >>> factorize(25)\n * ["}
{"language": "kotlin", "task_id": "HumanEval_kotlin/69", "completion": "\treturn q.sum() <= w && q.reversed() == q\n}\n\nfun main() {\n\tprintln(willItFly(listOf(1, 2), 5))\n\tprintln(willItFly(listOf(3, 2, 3), 1))\n\tprintln(willItFly(listOf(3, 2, 3), 9))\n\tprintln(willItFly(listOf(3), 5))\n}\n\n// 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/52", "completion": "\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return n-th Fibonacci number.\n * >>> fib(10)\n * 55\n * >>> fib(1)\n * 1\n * >>> fib(8)\n * 21\n *\n */\nfun fib(n: Int): Int {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return n-th Fibonacci number.\n * >>> fib(10)\n * 55\n * >>> fib(1)\n * 1\n * >>> fib(8)\n * 21\n *\n */\nfun fib(n: Int): Int {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return n-th Fibonacci number.\n * >>> fib(10)\n * 55\n * >>> fib(1)\n * 1\n * >>> fib(8)\n * 21\n *\n */\nfun fib(n: Int): Int {\n\n}\n\n/**\n * You are an"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/6", "completion": "\n}\n\n/**\n * You are given a string of parentheses.\n * Your task is to find the longest valid (well-formed) parentheses substring.\n * Return the length of this longest valid parentheses substring.\n *\n * >>> longest_valid_parens('(()())')\n * 2\n *\n */\nfun longestValidParens(parenString: String): Int {\n\n}\n\n/**\n * You are given a string of parentheses.\n * Your task is to find the longest valid (well-formed) parentheses substring.\n * Return the length of this longest valid parentheses substring.\n *\n * >>> longest_valid_parens('(()())')\n * 2\n *\n */\nfun longestValidParens2(parenString: String): Int {\n\n}\n\n/**\n * You are given a string of parentheses.\n * Your task is to find the longest valid (well-formed) parentheses substring.\n * Return the length of this longest valid parentheses substring.\n *\n * >>> longest_valid_parens('(()())')\n * 2\n *\n */\nfun longestValidParens3(parenString: String): Int {\n\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/73", "completion": "//    TODO(\"Not yet implemented\")\n    return x == n.pow(x.toInt().log(n.toDouble()).toInt())\n}\n\nfun main(args: Array<String>) {\n    println(isSimplePower(1, 4))\n    println(isSimplePower(2, 2))\n    println(isSimplePower(8, 2))\n    println(isSimplePower(3, 2))\n    println(isSimplePower(3, 1))\n    println(isSimplePower(5, 3))\n}\n\nfun Int.pow(exp: Int): Int {\n    var result = 1\n    for (i in 0 until exp) {\n        result *= this\n    }\n    return result\n}\n\nfun Int.log(base: Double): Double {\n    return Math.log(this.toDouble()) / Math.log(base)\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/83", "completion": "\n}\n\nfun main() {\n    println(antiShuffle(\"Hi\"))\n    println(antiShuffle(\"hello\"))\n    println(antiShuffle(\"Hello World!!!\"))\n}\n\nfun String.toCharList(): List<Char> {\n    val charList = mutableListOf<Char>()\n    for (i in 0 until length) {\n        charList.add(get(i))\n    }\n    return charList\n}\n\nfun List<Char>.sortByAscii(): List<Char> {\n    val sortedList = mutableListOf<Char>()\n    val sortedCharList = this.sortedBy { it.code }\n    for (i in sortedCharList) {\n        sortedList.add(i)\n    }\n    return sortedList\n}\n\nfun List<Char>.joinToString(): String {\n    var result = \"\"\n    for (i in this) {\n        result += i\n    }\n    return result\n}\n\nfun String.toCharList(): List<Char> {\n    val charList = mutableListOf<Char>()\n    for (i in 0 until length) {\n        charList.add(get(i))\n    }\n    return charList\n}\n\nfun List<Char>.sortByAscii(): List<"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/22", "completion": "\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Filter given list of any Kotlin values only for strings\n * >>> filter_strings(['a', 3.14, 5])\n * ['a']\n * >>> filter_strings([1, 2, 3, 'abc', {}, []])\n * ['abc']\n *\n */\nfun filterStrings(values: List<Any>): List<Any> {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Filter given list of any Kotlin values only for booleans\n * >>> filter_booleans(['a', 3.14, 5])\n * [false]\n * >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n * [true]\n *\n */\nfun filterBooleans(values: List<Any>): List<Any> {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Filter given list of any Kotlin values only for nulls\n * >>> filter_nulls(['a', 3.14"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/26", "completion": "\tval result = mutableListOf<Int>()\n\tnumbers.forEach {\n\t\tif (!result.contains(it)) {\n\t\t\tresult.add(it)\n\t\t}\n\t}\n\treturn result\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * From a list of integers, remove all elements that occur more than once.\n * Keep order of elements left the same as in the input.\n * >>> remove_duplicates([1, 2, 3, 2, 4])\n * [1, 3, 4]\n *\n */\nfun removeDuplicates2(numbers: List<Int>): List<Int> {\n\tval result = mutableListOf<Int>()\n\tnumbers.forEach {\n\t\tif (!result.contains(it)) {\n\t\t\tresult.add(it)\n\t\t}\n\t}\n\treturn result\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * From a list of integers, remove all elements that occur more than once.\n * Keep order of elements left the same as in the input.\n * >>> remove_duplicates([1, 2,"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/105", "completion": "//    TODO(\"Not yet implemented\")\n    var count = 0\n    for (i in arr) {\n        if (i.toString().sumDigits() > 0) {\n            count++\n        }\n    }\n    return count\n}\n\nfun main(args: Array<String>) {\n    println(countNums(listOf(1, 1, 2)))\n}\n\nfun Int.sumDigits(): Int {\n    var sum = 0\n    var temp = this\n    while (temp!= 0) {\n        sum += temp % 10\n        temp /= 10\n    }\n    return sum\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/35", "completion": "//    TODO(\"Not yet implemented\")\n    return 0\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n * >>> fizz_buzz(50)\n * 0\n * >>> fizz_buzz(78)\n * 2\n * >>> fizz_buzz(79)\n * 3\n *\n */\nfun fizzBuzz(n: Int): Int {\n//    TODO(\"Not yet implemented\")\n    return 0\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n * >>> fizz_buzz(50)\n * 0\n * >>> fizz_buzz(78)\n * 2\n * >>> fizz_buzz(79)\n * 3\n *\n */\nfun fizzBuzz(n: Int): Int {\n//    TODO(\"Not yet"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/30", "completion": "\tval result = mutableListOf<Int>()\n\tfor (i in l) {\n\t\tif (i > 0) {\n\t\t\tresult.add(i)\n\t\t}\n\t}\n\treturn result\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return only negative numbers in the list.\n * >>> get_negative([-1, 2, -4, 5, 6])\n * [-1, -4, 5]\n * >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n * [-5, -3, -10]\n *\n */\nfun getNegative(l: List<Int>): List<Int> {\n\tval result = mutableListOf<Int>()\n\tfor (i in l) {\n\t\tif (i < 0) {\n\t\t\tresult.add(i)\n\t\t}\n\t}\n\treturn result\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return only even numbers in"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/80", "completion": "\treturn if (n == 1) 2 else (10 * (pow(10.0, n - 2.0)).toInt()) + 1\n}\n\nfun main(args: Array<String>) {\n\tprintln(startsOneEnds(1))\n\tprintln(startsOneEnds(2))\n\tprintln(startsOneEnds(3))\n\tprintln(startsOneEnds(4))\n\tprintln(startsOneEnds(5))\n\tprintln(startsOneEnds(6))\n\tprintln(startsOneEnds(7))\n\tprintln(startsOneEnds(8))\n\tprintln(startsOneEnds(9))\n\tprintln(startsOneEnds(10))\n}\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/11", "completion": "\tval result = StringBuilder()\n\tfor (i in 0 until a.length) {\n\t\tresult.append(if (a[i] == b[i]) '0' else '1')\n\t}\n\treturn result.toString()\n}\n\n/**\n * You are given a string s consisting of only 1s and 0s.\n * You need to find the longest substring of s that contains at least one 1.\n * Return the length of this substring.\n * >>> longest_substring('101010')\n * 3\n *\n */\nfun longestSubstring(s: String): Int {\n\tvar max = 0\n\tvar count = 0\n\tfor (i in 0 until s.length) {\n\t\tif (s[i] == '1') {\n\t\t\tcount++\n\t\t} else {\n\t\t\tmax = maxOf(max, count)\n\t\t\tcount = 0\n\t\t}\n\t}\n\treturn maxOf(max, count)\n}\n\n/**\n * You are given a string s consisting of only 1s and 0s.\n * You need to find the longest substring of"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/2", "completion": "\n}\n\n/**\n * You are given a list of integers.\n * Return the sum of the integers in the list.\n * >>> sum_list([1, 2, 3])\n * 6\n *\n */\nfun sumList(list: List<Int>): Int {\n\n}\n\n/**\n * You are given a list of integers.\n * Return the sum of the integers in the list.\n * >>> sum_list([1, 2, 3])\n * 6\n *\n */\nfun sumList(list: List<Int>): Int {\n\n}\n\n/**\n * You are given a list of integers.\n * Return the sum of the integers in the list.\n * >>> sum_list([1, 2, 3])\n * 6\n *\n */\nfun sumList(list: List<Int>): Int {\n\n}\n\n/**\n * You are given a list of integers.\n * Return the sum of the integers in the list.\n * >>> sum_list([1, 2, 3])\n * 6\n *\n */\nfun sumList(list: List<Int>): Int {\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/138", "completion": "\tval fileNameArray = fileName.split(\".\")\n\tval fileNameWithoutExtension = fileNameArray[0]\n\tval fileNameExtension = fileNameArray[1]\n\tval fileNameWithoutExtensionArray = fileNameWithoutExtension.toCharArray()\n\tval fileNameExtensionArray = fileNameExtension.toCharArray()\n\tval fileNameWithoutExtensionArrayLength = fileNameWithoutExtensionArray.size\n\tval fileNameExtensionArrayLength = fileNameExtensionArray.size\n\tval fileNameWithoutExtensionArrayFirstChar = fileNameWithoutExtensionArray[0]\n\tval fileNameExtensionArrayFirstChar = fileNameExtensionArray[0]\n\tval fileNameWithoutExtensionArrayLastChar = fileNameWithoutExtensionArray[fileNameWithoutExtensionArrayLength - 1]\n\tval fileNameExtensionArrayLastChar = fileNameExtensionArray[fileNameExtensionArrayLength - 1]\n\tval fileNameWithoutExtensionArrayFirstCharIsLetter = fileNameWithoutExtensionArrayFirstChar in 'a'..'z' || fileNameWithoutExtensionArrayFirstChar in 'A'..'Z'\n\tval fileNameExtensionArrayFirstCharIsLetter = fileNameExtensionArrayFirstChar in 'a'..'z' || fileNameExtensionArrayFirstChar in 'A'..'Z'\n\tval fileNameWithoutExtensionArrayLastCharIsDigit = fileNameWithout"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/37", "completion": "\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * * prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n * >>> prime_fib(1)\n * 2\n * >>> prime_fib(2)\n * 3\n * >>> prime_fib(3)\n * 5\n * >>> prime_fib(4)\n * 13\n * >>> prime_fib(5)\n * 89\n *\n */\nfun primeFib(n: Int): Int {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * * prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n * >>> prime_fib(1)\n * 2\n * >>> prime_fib(2)\n * 3\n * >>> prime_fib(3)\n * 5\n * >>> prime_fib(4)\n * 13\n * >>> prime_fib(5)\n * 89\n *\n */\nfun primeFib(n: Int): Int {\n\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/24", "completion": "\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * For a given number n, find the smallest number that divides n evenly, larger than n\n * >>> smallest_divisor(15)\n * 10\n *\n */\nfun smallestDivisor(n: Int): Int {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * For a given number n, find the largest number that divides n evenly, smaller than n\n * >>> largest_divisor(15)\n * 5\n *\n */\nfun largestDivisor(n: Int): Int {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * For a given number n, find the smallest number that divides n evenly, larger than n\n * >>> smallest_divisor(15)\n * 10\n *\n */\nfun smallestDivisor(n: Int): Int {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * For a given number n, find the largest number"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/145", "completion": "\tval planets = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n\tval planet1Index = planets.indexOf(planet1)\n\tval planet2Index = planets.indexOf(planet2)\n\tval result = mutableListOf<String>()\n\tif (planet1Index == -1 || planet2Index == -1) return result\n\tif (planet1Index > planet2Index) {\n\t\tval temp = planet1\n\t\tplanet1 = planet2\n\t\tplanet2 = temp\n\t}\n\tfor (i in planet1Index + 1 until planet2Index) {\n\t\tresult.add(planets[i])\n\t}\n\treturn result\n}\n\nfun main(args: Array<String>) {\n\tprintln(bf(\"Jupiter\", \"Neptune\"))\n\tprintln(bf(\"Earth\", \"Mercury\"))\n\tprintln(bf(\"Mercury\", \"Uranus\"))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/120", "completion": "\tval collatz = mutableListOf<Int>()\n\tvar current = n\n\twhile (current!= 1) {\n\t\tcollatz.add(current)\n\t\tif (current % 2 == 0) {\n\t\t\tcurrent /= 2\n\t\t} else {\n\t\t\tcurrent = 3 * current + 1\n\t\t}\n\t}\n\tcollatz.add(1)\n\treturn collatz.filter { it % 2 == 1 }\n}\n\nfun main(args: Array<String>) {\n\tprintln(getOddCollatz(5))\n}\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/76", "completion": "\tval binary = StringBuilder()\n\tvar remainder = decimal\n\twhile (remainder > 0) {\n\t\tval bit = remainder % 2\n\t\tbinary.insert(0, bit)\n\t\tremainder /= 2\n\t}\n\treturn \"db$binarydb\"\n}\n\nfun main() {\n\tprintln(decimalToBinary(15))\n\tprintln(decimalToBinary(32))\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * You will be given a number in binary form and your task is to convert it to\n * decimal format. The function should return an integer, representing the decimal\n * number.\n\n * There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n * The extra characters are there to help with the format.\n\n * Examples:\n * binary_to_decimal(\"db1111db\")   # returns 15\n * binary_to_decimal(\"db100000db\") # returns 32\n *\n */\nfun binaryToDecimal(binary: String): Int {\n\tvar decimal = 0\n\t"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/15", "completion": "\treturn (0..n).joinToString(\" \")\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n * >>> string_sequence(0)\n * '0'\n * >>> string_sequence(5)\n * '0 1 2 3 4 5'\n *\n */\nfun stringSequence2(n: Int): String {\n\treturn (0..n).joinToString(\" \") { it.toString() }\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n * >>> string_sequence(0)\n * '0'\n * >>> string_sequence(5)\n * '0 1 2 3 4 5'\n *\n */\nfun stringSequence3(n: Int): String {\n\treturn (0..n).joinToString(\" \") { it.toString() }\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/107", "completion": "\tvar lst1Even = true\n\tvar lst2Even = true\n\tfor (i in lst1.indices) {\n\t\tif (lst1[i] % 2!= 0) {\n\t\t\tlst1Even = false\n\t\t}\n\t\tif (lst2[i] % 2!= 0) {\n\t\t\tlst2Even = false\n\t\t}\n\t}\n\tif (lst1Even) {\n\t\treturn \"YES\"\n\t}\n\tif (lst2Even) {\n\t\treturn \"YES\"\n\t}\n\treturn \"NO\"\n}\n\nfun main(args : Array<String>) {\n\tprintln(exchange(listOf(1, 2, 3, 4), listOf(1, 2, 3, 4)))\n\tprintln(exchange(listOf(1, 2, 3, 4), listOf(1, 5, 3, 4)))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/16", "completion": "\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Given a string, find out how many distinct words (regardless of case) does it consist of\n * >>> count_distinct_words('xyzXYZ')\n * 2\n * >>> count_distinct_words('Jerry')\n * 1\n *\n */\nfun countDistinctWords(string: String): Int {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Given a string, find out how many distinct words (regardless of case) does it consist of\n * >>> count_distinct_words('xyzXYZ')\n * 2\n * >>> count_distinct_words('Jerry')\n * 1\n *\n */\nfun countDistinctWords(string: String): Int {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Given a string, find out how many distinct words (regardless of case) does it consist of\n * >>> count_distinct_words('xyzXYZ')\n * 2\n * >>> count_distinct_words('Jerry')\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/61", "completion": "\tvar count = 0\n\tfor (i in s.indices) {\n\t\tif (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\nfun main(args: Array<String>) {\n\tprintln(vowelsCount(\"abcde\"))\n\tprintln(vowelsCount(\"ACEDY\"))\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Write a function vowels_count which takes a string representing\n * a word as input and returns the number of vowels in the string.\n * Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n * vowel, but only when it is at the end of the given word.\n\n * Example:\n * >>> vowels_count(\"abcde\")\n * 2\n * >>> vowels_count(\"ACEDY\")\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/115", "completion": "\tval vowels = \"aeiou\"\n\tvar closestVowel = \"\"\n\tvar closestVowelIndex = -1\n\tvar closestVowelDistance = Int.MAX_VALUE\n\tfor (i in word.indices) {\n\t\tif (vowels.contains(word[i])) {\n\t\t\tval distance = word.length - i - 1\n\t\t\tif (distance < closestVowelDistance) {\n\t\t\t\tclosestVowel = word[i]\n\t\t\t\tclosestVowelDistance = distance\n\t\t\t\tclosestVowelIndex = i\n\t\t\t}\n\t\t}\n\t}\n\treturn if (closestVowelIndex!= -1) {\n\t\tclosestVowel\n\t} else {\n\t\t\"\"\n\t}\n}\n\nfun main() {\n\tprintln(getClosestVowel(\"yogurt\"))\n\tprintln(getClosestVowel(\"FULL\"))\n\tprintln(getClosestVowel(\"quick\"))\n\tprintln(getClosestVowel(\"ab\"))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/111", "completion": "\tvar min = Long.MAX_VALUE\n\tvar sum = 0L\n\tfor (i in nums.indices) {\n\t\tsum += nums[i]\n\t\tif (sum < min) {\n\t\t\tmin = sum\n\t\t}\n\t\tif (sum > 0) {\n\t\t\tsum = 0L\n\t\t}\n\t}\n\treturn min\n}\n\nfun main(args: Array<String>) {\n\tprintln(minsubarraysum(listOf(2, 3, 4, 1, 2, 4)))\n\tprintln(minsubarraysum(listOf(-1, -2, -3)))\n}\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/82", "completion": "\n}\n\nfun main(args: Array<String>) {\n    println(add(listOf(4, 2, 6, 7)))\n}\n\nfun add(lst: List<Int>): Int {\n    var sum = 0\n    for (i in 0 until lst.size step 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfun main(args: Array<String>) {\n    println(add(listOf(4, 2, 6, 7)))\n}\n\nfun add(lst: List<Int>): Int {\n    var sum = 0\n    for (i in 0 until lst.size step 2) {\n        if (lst[i] % 2 == 0) {\n            sum += lst[i]\n        }\n    }\n    return sum\n}\n\nfun main(args: Array<String>) {\n    println(add(listOf(4, 2, 6, 7)))\n}\n\nfun add(lst: List<Int>): Int {\n    var sum = 0\n    for (i in 0"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/49", "completion": "//    TODO(\"Not yet implemented\")\n    return l.all { it < t }\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return True if all numbers in the list l are below threshold t.\n * >>> below_threshold([1, 2, 4, 10], 100)\n * True\n * >>> below_threshold([1, 20, 4, 10], 5)\n * False\n *\n */\nfun belowThreshold2(l: List<Int>, t: Int): Boolean {\n//    TODO(\"Not yet implemented\")\n    return l.all { it < t }\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return True if all numbers in the list l are below threshold t.\n * >>> below_threshold([1, 2, 4, 10], 100)\n * True\n * >>> below_threshold([1, 20, 4, 10], 5)\n * False\n *\n */\nfun belowThreshold3(l: List<Int>, t: Int"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/29", "completion": "//    TODO(\"Not yet implemented\")\n    return strings.filter { it.startsWith(prefix) }\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Filter an input list of strings only for ones that end with a given suffix.\n * >>> filter_by_suffix([], 'a')\n * []\n * >>> filter_by_suffix(['abc', 'bcd', 'cde', 'array'], 'a')\n * ['abc', 'array']\n *\n */\nfun filterBySuffix(strings: List<String>, suffix: String): List<String> {\n//    TODO(\"Not yet implemented\")\n    return strings.filter { it.endsWith(suffix) }\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Filter an input list of strings only for ones that contain a given substring.\n * >>> filter_by_substring([], 'a')\n * []\n * >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n * ['abc', 'array']\n *\n */\nfun filterBySubstring(strings: List<String>, substring: String): List"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/144", "completion": "\tvar count = 0\n\tfor (i in 1..n) {\n\t\tfor (j in i+1..n) {\n\t\t\tfor (k in j+1..n) {\n\t\t\t\tif ((i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0) {\n\t\t\t\t\tcount++\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n\nfun main(args : Array<String>) {\n\tprintln(getMaxTriples(5))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/86", "completion": "\n}\n\nfun main(args: Array<String>) {\n    println(encrypt(\"hi\"))\n    println(encrypt(\"asdfghjkl\"))\n    println(encrypt(\"gf\"))\n    println(encrypt(\"et\"))\n}\n\nfun String.rotate(n: Int): String {\n    val chars = toCharArray()\n    val length = chars.size\n    var i = 0\n    while (i < length) {\n        val j = (i + n) % length\n        val temp = chars[i]\n        chars[i] = chars[j]\n        chars[j] = temp\n        i++\n    }\n    return String(chars)\n}\n\nfun String.rotate2(n: Int): String {\n    val chars = toCharArray()\n    val length = chars.size\n    var i = 0\n    while (i < length) {\n        val j = (i + n) % length\n        val temp = chars[i]\n        chars[i] = chars[j]\n        chars[j] = temp\n        i++\n    }\n    return String(chars)\n}\n\nfun String.rotate3(n: Int): String {\n    val chars = toCharArray()\n    val length = chars.size"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/23", "completion": "\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return length of given string\n * >>> strlen('')\n * 0\n * >>> strlen('abc')\n * 3\n *\n */\nfun strlen(string: String): Int {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return length of given string\n * >>> strlen('')\n * 0\n * >>> strlen('abc')\n * 3\n *\n */\nfun strlen(string: String): Int {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return length of given string\n * >>> strlen('')\n * 0\n * >>> strlen('abc')\n * 3\n *\n */\nfun strlen(string: String): Int {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return length of given string\n * >>> strlen('')\n * 0\n * >>> strlen('abc')\n * 3\n *\n */\nfun strlen(string: String): Int {\n\n}\n\n/**\n * You"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/135", "completion": "\n}\n\nfun main(args: Array<String>) {\n    println(isEqualToSumEven(4))\n    println(isEqualToSumEven(6))\n    println(isEqualToSumEven(8))\n}\n\nfun isEqualToSumEven(n : Int) : Boolean {\n    if (n % 2!= 0) return false\n    if (n < 8) return false\n    if (n == 8) return true\n    if (n == 10) return true\n    if (n == 12) return true\n    if (n == 14) return true\n    if (n == 16) return true\n    if (n == 18) return true\n    if (n == 20) return true\n    if (n == 22) return true\n    if (n == 24) return true\n    if (n == 26) return true\n    if (n == 28) return true\n    if (n == 30) return true\n    if (n == 32) return true\n    if (n == 34) return true\n    if (n == 36) return true\n    if (n == 38) return true"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/72", "completion": "//    TODO(\"Not yet implemented\")\n    return false\n}\n\nfun main() {\n    println(isMultiplyPrime(30))\n}\n\nfun isMultiplyPrime(a: Int): Boolean {\n    var result = false\n    var i = 2\n    while (i < a) {\n        if (a % i == 0) {\n            i++\n        } else {\n            i++\n        }\n    }\n    if (i == a) {\n        result = true\n    }\n    return result\n}\n\nfun isMultiplyPrime(a: Int): Boolean {\n    var result = false\n    var i = 2\n    while (i < a) {\n        if (a % i == 0) {\n            i++\n        } else {\n            i++\n        }\n    }\n    if (i == a) {\n        result = true\n    }\n    return result\n}\n\nfun isMultiplyPrime(a: Int): Boolean {\n    var result = false\n    var i = 2\n    while (i < a) {\n        if (a % i == 0) {\n            i++\n        } else {\n            i++\n        }\n    }\n    if (i == a) {\n        result = true\n    }\n    return"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/59", "completion": "\tval result = mutableListOf<Int>()\n\tfor (i in xs.indices) {\n\t\tresult.add(xs[i] * (i + 1))\n\t}\n\treturn result\n}\n\nfun main() {\n\tprintln(derivative(listOf(3, 1, 2, 4, 5)))\n\tprintln(derivative(listOf(1, 2, 3)))\n}\n\nfun main2() {\n\tprintln(derivative(listOf(3, 1, 2, 4, 5)))\n\tprintln(derivative(listOf(1, 2, 3)))\n}\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/10", "completion": "\tval suffix = longestPalindrome(string)\n\tval prefix = string.substring(0, string.length - suffix.length)\n\treturn string + suffix.reversed()\n}\n\n/**\n * Find the longest palindrome that begins with a supplied string.\n * Algorithm idea is simple:\n * - Find the longest palindrome that begins with a supplied string.\n * - Find the longest palindrome that ends with a supplied string.\n * - Find the longest palindrome that begins and ends with a supplied string.\n * - Return the longest of the three.\n * >>> longestPalindrome('')\n * ''\n * >>> longestPalindrome('cat')\n * 'cat'\n * >>> longestPalindrome('cata')\n * 'ata'\n *\n */\nfun longestPalindrome(string: String): String {\n\tval prefix = longestPalindromePrefix(string)\n\tval suffix = longestPalindromeSuffix(string)\n\tval infix = longestPalindromeInfix(string)\n\treturn when {\n\t\tprefix.length > suffix.length && prefix.length > infix.length -> prefix\n\t\tsuffix.length > prefix.length && suffix.length > infix."}
{"language": "kotlin", "task_id": "HumanEval_kotlin/103", "completion": "\n}\n\nfun main() {\n    println(f(5))\n}\n\nfun factorial(n : Int) : Int {\n    var result = 1\n    for (i in 1..n) {\n        result *= i\n    }\n    return result\n}\n\nfun sum(n : Int) : Int {\n    var result = 0\n    for (i in 1..n) {\n        result += i\n    }\n    return result\n}\n\nfun sumOfEven(n : Int) : Int {\n    var result = 0\n    for (i in 1..n) {\n        if (i % 2 == 0) {\n            result += i\n        }\n    }\n    return result\n}\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/108", "completion": "\tval map = mutableMapOf<String, Int>()\n\tval words = text.split(\" \")\n\tfor (word in words) {\n\t\tif (map.containsKey(word)) {\n\t\t\tmap[word] = map[word]!! + 1\n\t\t} else {\n\t\t\tmap[word] = 1\n\t\t}\n\t}\n\treturn map\n}\n\nfun main(args : Array<String>) {\n\tprintln(histogram(\"a b c\"))\n\tprintln(histogram(\"a b b a\"))\n\tprintln(histogram(\"a b c a b\"))\n\tprintln(histogram(\"b b b b a\"))\n\tprintln(histogram(\"\"))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/146", "completion": "//    val sortedList = lst.sortedBy { it.length }\n//    val sortedList = lst.sortedByDescending { it.length }\n    val sortedList = lst.sortedBy { it.length }\n    val sortedList2 = sortedList.sortedBy { it }\n    return sortedList2\n}\n\nfun main() {\n    val lst = listOf(\"aa\", \"a\", \"aaa\")\n    println(sortedListSum(lst))\n}\n\nfun main2() {\n    val lst = listOf(\"ab\", \"a\", \"aaa\", \"cd\")\n    println(sortedListSum(lst))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/38", "completion": "\tval set = HashSet<Int>()\n\tfor (i in l) {\n\t\tif (set.contains(-i)) return true\n\t\tset.add(i)\n\t}\n\treturn false\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * triples_sum_to_zero takes a list of integers as an input.\n * it returns True if there are three distinct elements in the list that\n * sum to zero, and False otherwise.\n\n * >>> triples_sum_to_zero([1, 3, 5, 0])\n * False\n * >>> triples_sum_to_zero([1, 3, -2, 1])\n * True\n * >>> triples_sum_to_zero([1, 2, 3, 7])\n * False\n * >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n * True\n * >>> triples_sum_to_zero([1])\n * False\n *\n */\nfun triplesSumToZero2(l: List<Int>): Boolean {"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/143", "completion": "\tvar count = 0\n\tfor (num in nums) {\n\t\tif (num > 10 && (num % 2!= 0 && num % 10!= 0)) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n\nfun main(args: Array<String>) {\n\tprintln(specialfilter(listOf(15, -73, 14, -15)))\n\tprintln(specialfilter(listOf(33, -2, -3, 45, 21, 109)))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/132", "completion": "\tvar max = arr[0]\n\tvar index = 0\n\tfor (i in 1 until arr.size) {\n\t\tif (arr[i] > max) {\n\t\t\tmax = arr[i]\n\t\t\tindex = i\n\t\t}\n\t}\n\treturn if (index == arr.size - 1) -1 else index\n}\n\nfun main(args: Array<String>) {\n\tprintln(canArrange(listOf(1,2,4,3,5)))\n\tprintln(canArrange(listOf(1,2,3)))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/12", "completion": "\treturn strings.maxByOrNull { it.length }\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Out of list of strings, return the longest one. Return the first one in case of multiple\n * strings of the same length. Return  in case the input list is empty.\n * >>> longest([])\n\n * >>> longest(['a', 'b', 'c'])\n * 'a'\n * >>> longest(['a', 'bb', 'ccc'])\n * 'ccc'\n *\n */\nfun longest(strings: List<String>): String? {\n\treturn strings.maxByOrNull { it.length }\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Out of list of strings, return the longest one. Return the first one in case of multiple\n * strings of the same length. Return  in case the input list is empty.\n * >>> longest([])\n\n * >>> longest(['a', 'b', 'c'])\n * 'a'\n * >>> longest(['a', 'bb', 'ccc'])\n * 'ccc'\n *\n */\nfun longest(strings: List<String>):"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/31", "completion": "//    TODO(\"Not yet implemented\")\n    if (n <= 1) return false\n    if (n == 2) return true\n    if (n % 2 == 0) return false\n    var i = 3\n    while (i * i <= n) {\n        if (n % i == 0) return false\n        i += 2\n    }\n    return true\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return the sum of all the numbers in the given list.\n * >>> sum_list([1, 2, 3, 4, 5])\n * 15\n * >>> sum_list([1, 2, 3, 4, 5, 6])\n * 21\n * >>> sum_list([1, 2, 3, 4, 5, 6, 7])\n * 28\n * >>> sum_list([1, 2, 3, 4, 5, 6, 7, 8])\n * 36\n * >>> sum_list([1, 2, 3, 4, 5,"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/102", "completion": "//    val sorted = arr.sorted()\n//    val reversed = sorted.reversed()\n//    val result = reversed.map {\n//        when (it) {\n//            1 -> \"One\"\n//            2 -> \"Two\"\n//            3 -> \"Three\"\n//            4 -> \"Four\"\n//            5 -> \"Five\"\n//            6 -> \"Six\"\n//            7 -> \"Seven\"\n//            8 -> \"Eight\"\n//            9 -> \"Nine\"\n//            else -> \"\"\n//        }\n//    }\n//    return result\n    return arr.map {\n        when (it) {\n            1 -> \"One\"\n            2 -> \"Two\"\n            3 -> \"Three\"\n            4 -> \"Four\"\n            5 -> \"Five\"\n            6 -> \"Six\"\n            7 -> \"Seven\"\n            8 -> \"Eight\"\n            9 -> \"Nine\"\n            else -> \"\"\n        }\n    }\n}\n\nfun byLength2(arr: List<Int>): List<String> {\n    val result = arr.map {\n        when (it) {\n            1 -> \"One\"\n            2 -> \"Two\"\n            3"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/64", "completion": "//    val fruits = s.split(\" \")\n//    val apples = fruits[0].split(\" apples\")\n//    val oranges = fruits[1].split(\" oranges\")\n//    return totalFruits - apples[0].toInt() - oranges[0].toInt()\n    val fruits = s.split(\" \")\n    val apples = fruits[0].split(\" apples\")\n    val oranges = fruits[1].split(\" oranges\")\n    return totalFruits - apples[0].toInt() - oranges[0].toInt()\n}\n\nfun main() {\n    println(fruitDistribution(\"5 apples and 6 oranges\", 19))\n    println(fruitDistribution(\"0 apples and 1 oranges\",3))\n    println(fruitDistribution(\"2 apples and 3 oranges\", 100))\n    println(fruitDistribution(\"100 apples and 1 oranges\",120))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/157", "completion": "\tval stack = Stack<Int>()\n\tfor (i in operand.indices) {\n\t\tif (i == 0) {\n\t\t\tstack.push(operand[i])\n\t\t} else {\n\t\t\tval op = operator[i - 1]\n\t\t\tval a = stack.pop()\n\t\t\tval b = operand[i]\n\t\t\twhen (op) {\n\t\t\t\t\"+\" -> stack.push(a + b)\n\t\t\t\t\"-\" -> stack.push(a - b)\n\t\t\t\t\"*\" -> stack.push(a * b)\n\t\t\t\t\"/\" -> stack.push(a / b)\n\t\t\t\t\"%\" -> stack.push(a % b)\n\t\t\t\t\"**\" -> stack.push(a.toDouble().pow(b.toDouble()).toInt())\n\t\t\t\telse -> throw IllegalArgumentException(\"Unknown operator: $op\")\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.pop()\n}\n\nfun main(args: Array<String>) {\n\tval operator = listOf(\"+\", \"*\", \"-\")\n\tval operand = listOf(2, 3, 4, 5)\n\tprintln(doAlgebra(operator, operand))\n}\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/96", "completion": "\n}\n\nfun main(args: Array<String>) {\n    println(closestInteger(\"10\"))\n    println(closestInteger(\"15.3\"))\n    println(closestInteger(\"14.5\"))\n    println(closestInteger(\"-14.5\"))\n}\n\nfun closestInteger(value: String): Int {\n    val number = value.toDouble()\n    val rounded = Math.round(number)\n    val diff = Math.abs(rounded - number)\n    val diff2 = Math.abs(rounded - number - 1)\n    return if (diff < diff2) rounded else rounded - 1\n}\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/44", "completion": "\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n * fib5(0) -> 0\n * fib5(1) -> 0\n * fib5(2) -> 2\n * fib5(3) -> 0\n * fib5(4) -> 2\n * fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n * Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n * >>> fib5(5)\n * 5\n * >>> fib5(6)\n * 11\n * >>> fib5(7)\n * 21\n *\n */\nfun fib5(n: Int): Int {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * The Fib6 number sequence is a sequence similar"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/63", "completion": "//    var sum = 0\n//    for (i in s.indices) {\n//        if (s[i].isUpperCase()) {\n//            sum += s[i].code\n//        }\n//    }\n//    return sum\n    return s.toUpperCase().map { it.code }.sum()\n}\n\nfun main() {\n    println(digitsum(\"\"))\n    println(digitsum(\"abAB\"))\n    println(digitsum(\"abcCd\"))\n    println(digitsum(\"helloE\"))\n    println(digitsum(\"woArBld\"))\n    println(digitsum(\"aAaaaXa\"))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/14", "completion": "\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return list of all suffixes from shortest to longest of the input string\n * >>> all_suffixes('abc')\n * ['c', 'bc', 'abc']\n *\n */\nfun allSuffixes(string: String): List<Any> {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return list of all substrings from shortest to longest of the input string\n * >>> all_substrings('abc')\n * ['a', 'ab', 'abc', 'b', 'bc', 'c']\n *\n */\nfun allSubstrings(string: String): List<Any> {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Return list of all permutations of the input string\n * >>> all_permutations('abc')\n * ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n *\n */\nfun allPermutations(string: String): List<Any> {\n\n}\n\n/**\n * You are an expert"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/95", "completion": "\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Given a string s, count the number of uppercase vowels in odd indices.\n *\n * For example:\n * count_upper('aBCdEf') returns 0\n * count_upper('abcdefg') returns 1\n * count_upper('dBBE') returns 1\n *\n */\nfun countLower(s: String): Int {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Given a string s, count the number of uppercase vowels in even indices.\n *\n * For example:\n * count_upper('aBCdEf') returns 1\n * count_upper('abcdefg') returns 0\n * count_upper('dBBE') returns 0\n *\n */\nfun countUpper(s: String): Int {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * * Given a string s, count the number of uppercase vowels in odd indices.\n *\n * For example:\n * count_upper('a"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/9", "completion": "\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * From a given list of integers, generate a list of rolling minimum element found until given moment\n * in the sequence.\n * >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n * [1, 1, 2, 2, 2, 2, 2]\n *\n */\nfun rollingMin(numbers: List<Int>): List<Int> {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * From a given list of integers, generate a list of rolling sum element found until given moment\n * in the sequence.\n * >>> rolling_sum([1, 2, 3, 2, 3, 4, 2])\n * [1, 3, 6, 8, 11, 15, 17]\n *\n */\nfun rollingSum(numbers: List<Int>): List<Int> {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/152", "completion": "\n}\n\nfun main(args: Array<String>) {\n    println(evenOddCount(-12))\n    println(evenOddCount(123))\n}\n\nfun evenOddCount(num : Int) : List<Int> {\n    var even = 0\n    var odd = 0\n    var temp = num\n    while (temp!= 0) {\n        if (temp % 2 == 0) {\n            even++\n        } else {\n            odd++\n        }\n        temp /= 10\n    }\n    return listOf(even, odd)\n}\n\nfun evenOddCount(num : Int) : List<Int> {\n    var even = 0\n    var odd = 0\n    var temp = num\n    while (temp!= 0) {\n        if (temp % 2 == 0) {\n            even++\n        } else {\n            odd++\n        }\n        temp /= 10\n    }\n    return listOf(even, odd)\n}\n\nfun evenOddCount(num : Int) : List<Int> {\n    var even = 0\n    var odd = 0\n    var temp = num\n    while (temp!= 0) {\n        if (temp % "}
{"language": "kotlin", "task_id": "HumanEval_kotlin/50", "completion": "\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Subtract two numbers x and y\n * >>> subtract(5, 3)\n * 2\n * >>> subtract(10, 5)\n * 5\n *\n */\nfun subtract(x: Int, y: Int): Int {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Multiply two numbers x and y\n * >>> multiply(2, 3)\n * 6\n * >>> multiply(5, 7)\n * 35\n *\n */\nfun multiply(x: Int, y: Int): Int {\n\n}\n\n/**\n * You are an expert Kotlin programmer, and here is your task.\n * Divide two numbers x and y\n * >>> divide(5, 3)\n * 1.6666666666666667\n * >>> divide(10, 5)\n * 2.0\n *\n */\nfun divide(x: Int, y: Int): Double {\n\n}\n\n/**\n * You"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/85", "completion": "\tval sum = array.sum()\n\tval odd = sum % 2 == 1\n\treturn array.sortedWith(compareBy<Int> { it }.thenBy { it }.reversed())\n}\n\nfun main() {\n\tprintln(sortArrayByBinary(listOf(2, 4, 3, 0, 1, 5)))\n}\n\nfun <T> List<T>.sortedWith(comparator: Comparator<T>): List<T> {\n\tval result = mutableListOf<T>()\n\tvar current = 0\n\tvar last = 0\n\twhile (current < size) {\n\t\tval next = current + 1\n\t\twhile (next < size && comparator.compare(this[current], this[next]) == 0) {\n\t\t\tnext++\n\t\t}\n\t\tresult.add(this[current])\n\t\tlast = current\n\t\tcurrent = next\n\t}\n\treturn result\n}\n"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/91", "completion": "//    val prime = listOf(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n    val prime = listOf(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 15"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/148", "completion": "\tvar sum = 0\n\tfor (i in lst) {\n\t\tif (i is Int && i % 2!= 0) {\n\t\t\tsum += i * i\n\t\t}\n\t}\n\treturn sum\n}\n\nfun main(args: Array<String>) {\n\tprintln(doubleTheDifference(listOf(1, 3, 2, 0)))\n\tprintln(doubleTheDifference(listOf(-1, -2, 0)))\n\tprintln(doubleTheDifference(listOf(9, -2)))\n\tprintln(doubleTheDifference(listOf(0)))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/121", "completion": "\tval datePattern = Regex(\"^(\\\\d{2})-(\\\\d{2})-(\\\\d{4})$\")\n\tval dateMatcher = datePattern.matchEntire(date)\n\tif (dateMatcher == null) return false\n\tval month = dateMatcher.groupValues[1].toInt()\n\tval day = dateMatcher.groupValues[2].toInt()\n\tval year = dateMatcher.groupValues[3].toInt()\n\tif (month < 1 || month > 12) return false\n\tif (day < 1 || day > 31) return false\n\tif (month == 2) {\n\t\tif (day < 1 || day > 29) return false\n\t} else if (month in 4..6 || month in 9..11) {\n\t\tif (day < 1 || day > 30) return false\n\t} else {\n\t\tif (day < 1 || day > 31) return false\n\t}\n\treturn true\n}\n\nfun main(args: Array<String>) {\n\tprintln(validDate(\"03-11-200"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/137", "completion": "\tvar result = \"\"\n\tvar count = 0\n\tfor (i in text.indices) {\n\t\tif (text[i] =='') {\n\t\t\tif (count > 1) {\n\t\t\t\tresult += \"-\"\n\t\t\t} else {\n\t\t\t\tresult += \"_\"\n\t\t\t}\n\t\t\tcount++\n\t\t} else {\n\t\t\tresult += text[i]\n\t\t\tcount = 0\n\t\t}\n\t}\n\treturn result\n}\n\nfun main(args: Array<String>) {\n\tprintln(fixSpaces(\"Example\"))\n\tprintln(fixSpaces(\"Example 1\"))\n\tprintln(fixSpaces(\" Example 2\"))\n\tprintln(fixSpaces(\" Example   3\"))\n}"}
{"language": "kotlin", "task_id": "HumanEval_kotlin/77", "completion": "//    TODO(\"Not yet implemented\")\n    return false\n}\n\nfun main() {\n    println(isHappy(\"a\"))\n    println(isHappy(\"aa\"))\n    println(isHappy(\"abcd\"))\n    println(isHappy(\"aabb\"))\n    println(isHappy(\"adb\"))\n    println(isHappy(\"xyy\"))\n}\n\nfun isHappy(s: String): Boolean {\n    if (s.length < 3) return false\n    for (i in 0 until s.length - 2) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false\n    }\n    return true\n}\n\nfun isHappy(s: String): Boolean {\n    if (s.length < 3) return false\n    for (i in 0 until s.length - 2) {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false\n    }\n    return true\n}"}
