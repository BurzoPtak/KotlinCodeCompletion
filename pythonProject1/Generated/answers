{"task_id": "HumanEval_kotlin/32", "completion": "\tval result = mutableListOf<Int>()\n\tfor (i in 0 until l.size step 3) {\n\t\tresult.addAll(l.subList(i, i + 3).sorted())\n\t}\n\treturn result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/74", "completion": "//    TODO(\"Not yet implemented\")\n    var cube = 1\n    var i = 1\n    while (cube < a) {\n        cube = i * i * i\n        i++\n    }\n    return cube == a\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/160", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/88", "completion": "\tvar count = 0\n\tvar start = 0\n\tvar end = 0\n\tvar i = 0\n\twhile (i < s.length) {\n\t\tif (s[i] =='') {\n\t\t\tif (s.substring(start, i).equals(\"I\", true)) {\n\t\t\t\tcount++\n\t\t\t}\n\t\t\tstart = i + 1\n\t\t}\n\t\ti++\n\t}\n\tif (s.substring(start, i).equals(\"I\", true)) {\n\t\tcount++\n\t}\n\treturn count\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/89", "completion": "\treturn when {\n\t\tx is Int && y is Int && z is Int -> x + y == z || x + z == y || y + z == x\n\t\telse -> false\n\t}\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/119", "completion": "\tvar sum = 0\n\tfor (i in 0 until k) {\n\t\tval num = arr[i]\n\t\tif (num < 10) {\n\t\t\tsum += num\n\t\t} else if (num < 100) {\n\t\t\tsum += num % 10\n\t\t}\n\t}\n\treturn sum\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/3", "completion": "\tvar balance = 0\n\tfor (operation in operations) {\n\t\tbalance += operation\n\t\tif (balance < 0) return true\n\t}\n\treturn false\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/84", "completion": "\tval result = mutableListOf<List<Int>>()\n\tfor (i in lst.indices) {\n\t\tif (lst[i].contains(x)) {\n\t\t\tresult.add(listOf(i, lst[i].indexOf(x)))\n\t\t}\n\t}\n\treturn result.sortedBy { it[0] }.sortedByDescending { it[1] }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/17", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/57", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/87", "completion": "\tif (lst.isEmpty()) return null\n\tif (lst.size == 1) return null\n\tif (lst.size == 2) return null\n\tlst.sort()\n\treturn lst[1]\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/34", "completion": "\tvar max = l[0]\n\tfor (i in 1 until l.size) {\n\t\tif (l[i] > max) {\n\t\t\tmax = l[i]\n\t\t}\n\t}\n\treturn max\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/21", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/42", "completion": "\tval result = StringBuilder()\n\tvar remainder = x\n\twhile (remainder > 0) {\n\t\tval digit = remainder % base\n\t\tresult.insert(0, digit)\n\t\tremainder /= base\n\t}\n\treturn result.toString()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/27", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/141", "completion": "\tval xArr = x.split(\"/\")\n\tval nArr = n.split(\"/\")\n\tval xNum = xArr[0].toInt()\n\tval xDen = xArr[1].toInt()\n\tval nNum = nArr[0].toInt()\n\tval nDen = nArr[1].toInt()\n\treturn (xNum * nDen == nNum * xDen)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/98", "completion": "//    TODO(\"Not yet implemented\")\n    return s.split(\" |,\".toRegex()).filter { it.isNotBlank() }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/75", "completion": "\tval hex = \"0123456789ABCDEF\"\n\tval primes = listOf(2, 3, 5, 7, 11, 13)\n\tvar count = 0\n\tfor (i in 0 until num.length) {\n\t\tval digit = num[i]\n\t\tif (digit in hex) {\n\t\t\tval index = hex.indexOf(digit)\n\t\t\tif (primes.contains(index)) {\n\t\t\t\tcount++\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/92", "completion": "\tif (dict.isEmpty()) return false\n\tval keys = dict.keys\n\tval firstKey = keys.first()\n\tval firstKeyClass = firstKey.javaClass\n\tval firstKeyClassIsString = firstKeyClass == String::class.java\n\tval allKeysAreStrings = keys.all { it.javaClass == String::class.java }\n\treturn if (firstKeyClassIsString) allKeysAreStrings else!allKeysAreStrings\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/4", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/62", "completion": "\tval digits = x.toString().toCharArray()\n\tval length = digits.size\n\tif (shift > length) {\n\t\treturn String(digits.reversedArray())\n\t}\n\tval result = CharArray(length)\n\tfor (i in 0 until length) {\n\t\tresult[i] = digits[(i + shift) % length]\n\t}\n\treturn String(result)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/43", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/128", "completion": "\tvar product = 1\n\tvar temp = n\n\twhile (temp > 0) {\n\t\tval digit = temp % 10\n\t\tif (digit % 2!= 0) {\n\t\t\tproduct *= digit\n\t\t}\n\t\ttemp /= 10\n\t}\n\treturn product\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/129", "completion": "\tvar count = 0\n\tfor (i in string.indices) {\n\t\tif (string[i] == '[') {\n\t\t\tcount++\n\t\t} else {\n\t\t\tcount--\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn count == 0\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/46", "completion": "\treturn text.reversed() == text\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/93", "completion": "//    TODO(\"Not yet implemented\")\n    return listOf()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/90", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/150", "completion": "\tvar strongestExtension = \"\"\n\tvar strongestStrength = 0\n\tfor (extension in extensions) {\n\t\tval strength = extension.count { it.isUpperCase() } - extension.count { it.isLowerCase() }\n\t\tif (strength > strongestStrength) {\n\t\t\tstrongestExtension = extension\n\t\t\tstrongestStrength = strength\n\t\t}\n\t}\n\treturn \"$className.$strongestExtension\"\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/40", "completion": "//    TODO(\"Not yet implemented\")\n    return l.map { it + 1 }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/51", "completion": "\tval s0Chars = s0.toCharArray()\n\tval s1Chars = s1.toCharArray()\n\ts0Chars.sort()\n\ts1Chars.sort()\n\treturn s0Chars.contentEquals(s1Chars)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/99", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/65", "completion": "//    val even = arr.filter { it % 2 == 0 }\n//    val minEven = even.min()\n//    val minEvenIndex = even.indexOf(minEven)\n//    return listOf(minEven, minEvenIndex)\n    return arr.filter { it % 2 == 0 }.minWith(compareBy({ it }, { it }))\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/158", "completion": "\tvar result = \"\"\n\tfor (i in s.indices) {\n\t\tif (s[i].isLetter()) {\n\t\t\tresult += if (s[i].isLowerCase()) s[i].toUpperCase() else s[i].toLowerCase()\n\t\t} else {\n\t\t\tresult += s[i]\n\t\t}\n\t}\n\treturn if (result.isEmpty()) result else result.reversed()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/106", "completion": "\tif (arr.isEmpty()) return true\n\tvar count = 0\n\tfor (i in 0 until arr.size) {\n\t\tif (arr[i]!= i + 1) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count <= 2\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/58", "completion": "\tvar stack = Stack<Char>()\n\tfor (c in brackets) {\n\t\tif (c == '(') {\n\t\t\tstack.push(c)\n\t\t} else {\n\t\t\tif (stack.isEmpty()) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tstack.pop()\n\t\t}\n\t}\n\treturn stack.isEmpty()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/67", "completion": "\tval sorted = mutableListOf<Int>()\n\tvar min = lst.min()!!\n\tvar max = lst.max()!!\n\twhile (lst.isNotEmpty()) {\n\t\tsorted.add(min)\n\t\tsorted.add(max)\n\t\tmin = lst.min()!!\n\t\tmax = lst.max()!!\n\t\tlst.remove(min)\n\t\tlst.remove(max)\n\t}\n\treturn sorted\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/154", "completion": "\treturn a*a + b*b == c*c\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/113", "completion": "//    val sorted = arr.sortedBy { it.countBits() }\n//    return sorted.sortedBy { it }\n    return arr.sortedBy { it.countBits() }.sortedBy { it }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/124", "completion": "\tval start = max(interval1[0], interval2[0])\n\tval end = min(interval1[1], interval2[1])\n\tif (start > end) return \"NO\"\n\treturn if (isPrime(end - start + 1)) \"YES\" else \"NO\"\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/71", "completion": "\treturn lst1.filter { it.length < lst2.filter { it.length < it.length }.sumBy { it.length } }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/0", "completion": "\tvar result = false\n\tfor (i in 0 until numbers.size) {\n\t\tfor (j in i + 1 until numbers.size) {\n\t\t\tif (Math.abs(numbers[i] - numbers[j]) < threshold) {\n\t\t\t\tresult = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\treturn result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/100", "completion": "\tif (n > m) return \"-1\"\n\tval sum = (n + m) * (m - n + 1) / 2\n\tval avg = sum / (m - n + 1)\n\treturn Integer.toBinaryString(avg)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/70", "completion": "\tval n = arr.size\n\tval dp = Array(n) { IntArray(n) { 0 } }\n\tfor (i in 0 until n) {\n\t\tdp[i][i] = 0\n\t}\n\tfor (i in 0 until n - 1) {\n\t\tif (arr[i] == arr[i + 1]) {\n\t\t\tdp[i][i + 1] = 1\n\t\t} else {\n\t\t\tdp[i][i + 1] = 2\n\t\t}\n\t}\n\tfor (i in 2 until n) {\n\t\tfor (j in 0 until n - i) {\n\t\t\tif (arr[j] == arr[j + i]) {\n\t\t\t\tdp[j][j + i] = dp[j + 1][j + i - 1]\n\t\t\t} else {\n\t\t\t\tdp[j][j + i] = minOf(dp[j + 1][j + i], dp[j][j + i - 1]) + 2\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[0][n - 1]", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/81", "completion": "//    val binary = n.toString(2)\n//    val sum = binary.sumOf { it.digitToInt() }\n//    return sum.toString()\n    var sum = 0\n    while (n > 0) {\n        sum += n % 2\n        n /= 2\n    }\n    return sum.toString()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/78", "completion": "\tval letterGrades = mutableListOf<String>()\n\tfor (grade in grades) {\n\t\twhen {\n\t\t\tgrade >= 4.0 -> letterGrades.add(\"A+\")\n\t\t\tgrade >= 3.7 -> letterGrades.add(\"A\")\n\t\t\tgrade >= 3.3 -> letterGrades.add(\"A-\")\n\t\t\tgrade >= 3.0 -> letterGrades.add(\"B+\")\n\t\t\tgrade >= 2.7 -> letterGrades.add(\"B\")\n\t\t\tgrade >= 2.3 -> letterGrades.add(\"B-\")\n\t\t\tgrade >= 2.0 -> letterGrades.add(\"C+\")\n\t\t\tgrade >= 1.7 -> letterGrades.add(\"C\")\n\t\t\tgrade >= 1.3 -> letterGrades.add(\"C-\")\n\t\t\tgrade >= 1.0 -> letterGrades.add(\"D+\")\n\t\t\tgrade >= 0.7 -> letterGrades.add(\"D\")\n\t\t\tgrade >= 0.0 -> letterGrades.add(\"D-\")\n\t\t\telse -> letterGrades.add(\"E\")\n\t\t}\n\t}\n\treturn letterGr", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/54", "completion": "\tif (l.isEmpty()) return true\n\tvar prev = l[0]\n\tfor (i in 1 until l.size) {\n\t\tif (l[i] > prev) {\n\t\t\tprev = l[i]\n\t\t} else if (l[i] < prev) {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/94", "completion": "//    return a * b % 10\n//    return a * b % 100\n//    return a * b % 1000\n//    return a * b % 10000\n//    return a * b % 100000\n//    return a * b % 1000000\n//    return a * b % 10000000\n//    return a * b % 100000000\n//    return a * b % 1000000000\n//    return a * b % 10000000000\n//    return a * b % 100000000000\n//    return a * b % 1000000000000\n//    return a * b % 10000000000000\n//    return a * b % 100000000000000\n//    return a * b % 100", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/79", "completion": "//    TODO(\"Not yet implemented\")\n    return false\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/140", "completion": "\tval words = sentence.split(\" \")\n\tval result = mutableListOf<String>()\n\tfor (word in words) {\n\t\tif (isPrime(word.length)) {\n\t\t\tresult.add(word)\n\t\t}\n\t}\n\treturn result.joinToString(\" \")\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/127", "completion": "\tval result = mutableListOf<Int>()\n\tresult.add(1)\n\tresult.add(3)\n\tresult.add(2)\n\tvar i = 3\n\twhile (i <= n) {\n\t\tif (i % 2 == 0) {\n\t\t\tresult.add(i / 2)\n\t\t} else {\n\t\t\tresult.add(result[i - 1] + result[i - 2] + result[i + 1])\n\t\t}\n\t\ti++\n\t}\n\treturn result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/133", "completion": "\tvar max = Int.MIN_VALUE\n\tvar min = Int.MAX_VALUE\n\tfor (i in lst) {\n\t\tif (i > max) {\n\t\t\tmax = i\n\t\t}\n\t\tif (i < min) {\n\t\t\tmin = i\n\t\t}\n\t}\n\treturn listOf(max, min)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/18", "completion": "\tvar count = 0\n\tvar index = string.indexOf(substring)\n\twhile (index!= -1) {\n\t\tcount++\n\t\tindex = string.indexOf(substring, index + substring.length)\n\t}\n\treturn count\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/159", "completion": "\treturn text.toByteArray().contentHashCode().toString()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/118", "completion": "\tvar sum = 0\n\tfor (i in 0 until lst.size step 2) {\n\t\tif (lst[i] % 2!= 0) {\n\t\t\tsum += lst[i]\n\t\t}\n\t}\n\treturn sum\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/33", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/153", "completion": "\tval roman = mutableListOf<String>()\n\tval romanMap = mapOf(\n\t\t1000 to \"m\",\n\t\t900 to \"cm\",\n\t\t500 to \"d\",\n\t\t400 to \"cd\",\n\t\t100 to \"c\",\n\t\t90 to \"xc\",\n\t\t50 to \"l\",\n\t\t40 to \"xl\",\n\t\t10 to \"x\",\n\t\t9 to \"ix\",\n\t\t5 to \"v\",\n\t\t4 to \"iv\",\n\t\t1 to \"i\"\n\t)\n\n\tfor (entry in romanMap) {\n\t\tval count = number / entry.key\n\t\tif (count > 0) {\n\t\t\tfor (i in 1..count) {\n\t\t\t\troman.add(entry.value)\n\t\t\t}\n\t\t\tnumber -= entry.key * count\n\t\t}\n\t}\n\n\treturn roman.joinToString(\"\")\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/123", "completion": "\tvar sorted = true\n\tvar previous = lst[0]\n\tfor (i in 1 until lst.size) {\n\t\tif (lst[i] < previous) {\n\t\t\tsorted = false\n\t\t\tbreak\n\t\t}\n\t\tprevious = lst[i]\n\t}\n\treturn sorted\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/20", "completion": "\tval min = numbers.minOrNull()!!\n\tval max = numbers.maxOrNull()!!\n\tval minIndex = numbers.indexOf(min)\n\tval maxIndex = numbers.indexOf(max)\n\treturn if (minIndex < maxIndex) {\n\t\tlistOf(min, max)\n\t} else {\n\t\tlistOf(max, min)\n\t}\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/53", "completion": "\tvar stack = Stack<Char>()\n\tfor (c in brackets) {\n\t\tif (c == '<') {\n\t\t\tstack.push(c)\n\t\t} else if (c == '>') {\n\t\t\tif (stack.isEmpty()) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t\tstack.pop()\n\t\t}\n\t}\n\treturn stack.isEmpty()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/130", "completion": "\tvar sum = 0\n\tfor (i in lst) {\n\t\tsum += Math.ceil(i).toInt().pow(2)\n\t}\n\treturn sum\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/39", "completion": "\tvar count = 0\n\tvar left = 0\n\tvar right = 0\n\twhile (left < n && right < n) {\n\t\tif (left == right) {\n\t\t\tleft++\n\t\t\tright++\n\t\t} else if (left < right) {\n\t\t\tleft++\n\t\t} else {\n\t\t\tright++\n\t\t}\n\t\tif (left == right) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/13", "completion": "//    TODO(\"Not yet implemented\")\n    return a.gcd(b)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/104", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/56", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/1", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/66", "completion": "\tvar max = 0\n\tvar count = 0\n\tfor (i in lst) {\n\t\tif (i > max) {\n\t\t\tmax = i\n\t\t\tcount = 1\n\t\t} else if (i == max) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn if (count >= max) max else -1\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/151", "completion": "\tif (a.length < b.length) return false\n\tvar i = 0\n\twhile (i < b.length) {\n\t\tif (a.indexOf(b.substring(i), i) == -1) return false\n\t\ti++\n\t}\n\treturn true\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/122", "completion": "\treturn txt.split(\" \").map { it.split(\",\") }.flatten().map { it.toLowerCase() }.filter { it.length % 2 == 1 }.size\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/5", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/142", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/48", "completion": "//    TODO(\"Not yet implemented\")\n    return text.filter { it!in \"aeiouAEIOU\" }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/155", "completion": "\tvar max = \"\"\n\tvar maxCount = 0\n\tfor (word in words) {\n\t\tval count = word.toSet().size\n\t\tif (count > maxCount) {\n\t\t\tmax = word\n\t\t\tmaxCount = count\n\t\t}\n\t}\n\treturn max\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/125", "completion": "\tif (arr.isEmpty()) return null\n\tvar sum = 0\n\tvar prod = 1\n\tfor (i in arr) {\n\t\tsum += Math.abs(i)\n\t\tprod *= i.sign\n\t}\n\treturn sum * prod\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/149", "completion": "\tval result = mutableListOf<Int>()\n\tfor (i in game.indices) {\n\t\tresult.add(Math.abs(game[i] - guess[i]))\n\t}\n\treturn result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/139", "completion": "\tvar sum = 0\n\tfor (i in 0 until lst.size) {\n\t\tif (i % 3 == 0) {\n\t\t\tsum += lst[i] * lst[i]\n\t\t} else if (i % 4 == 0 && i % 3!= 0) {\n\t\t\tsum += lst[i] * lst[i] * lst[i]\n\t\t}\n\t}\n\treturn sum\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/131", "completion": "\treturn txt.last().isLetter() && txt.last().isLowerCase()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/156", "completion": "\treturn listOf(number + need, remaining - need)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/41", "completion": "\tval map = mutableMapOf<Int, Int>()\n\tfor (i in l) {\n\t\tval complement = -i\n\t\tif (map.containsKey(complement)) {\n\t\t\treturn true\n\t\t}\n\t\tmap[i] = i\n\t}\n\treturn false\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/110", "completion": "\treturn lst.map {\n\t\tit.count { it.isDigit() && it.toInt() % 2 == 1 }.toString() + \"n the str\" + it.length + \"ng \" + it.length + \" of the \" + it.length + \"nput.\"\n\t}\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/28", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/114", "completion": "\tval words = mutableListOf<String>()\n\tval consonants = \"bcdfghjklmnpqrstvwxyz\"\n\tvar count = 0\n\tvar word = \"\"\n\tfor (i in s.indices) {\n\t\tif (consonants.contains(s[i])) {\n\t\t\tcount++\n\t\t\tword += s[i]\n\t\t} else {\n\t\t\tif (count == n) {\n\t\t\t\twords.add(word)\n\t\t\t}\n\t\t\tcount = 0\n\t\t\tword = \"\"\n\t\t}\n\t}\n\treturn words\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/45", "completion": "\tval sorted = l.sorted()\n\tval size = sorted.size\n\treturn if (size % 2 == 0) {\n\t\t(sorted[size / 2 - 1] + sorted[size / 2]) / 2.0\n\t} else {\n\t\tsorted[size / 2]\n\t}\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/116", "completion": "\tval stack = Stack<Char>()\n\tfor (s in lst) {\n\t\tfor (c in s) {\n\t\t\tif (c == '(') {\n\t\t\t\tstack.push(c)\n\t\t\t} else {\n\t\t\t\tif (stack.isEmpty()) {\n\t\t\t\t\treturn \"No\"\n\t\t\t\t} else {\n\t\t\t\t\tstack.pop()\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn if (stack.isEmpty()) \"Yes\" else \"No\"\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/147", "completion": "\treturn if (isPrime(n)) x else y\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/117", "completion": "\tval maxHeap = PriorityQueue<Int>(k)\n\tfor (i in arr) {\n\t\tif (maxHeap.size < k) {\n\t\t\tmaxHeap.add(i)\n\t\t} else {\n\t\t\tif (i > maxHeap.peek()) {\n\t\t\t\tmaxHeap.poll()\n\t\t\t\tmaxHeap.add(i)\n\t\t\t}\n\t\t}\n\t}\n\treturn maxHeap.toList()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/109", "completion": "\tval result = StringBuilder()\n\tvar isPalindrome = true\n\tfor (i in s.indices) {\n\t\tif (!c.contains(s[i])) {\n\t\t\tresult.append(s[i])\n\t\t} else {\n\t\t\tisPalindrome = false\n\t\t}\n\t}\n\treturn Pair(result.toString(), isPalindrome)\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/112", "completion": "\tval n = grid.size\n\tval m = grid[0].size\n\tvar res = 0\n\tfor (i in 0 until n) {\n\t\tfor (j in 0 until m) {\n\t\t\tif (grid[i][j] == 1) {\n\t\t\t\tres += capacity - (i + j)\n\t\t\t}\n\t\t}\n\t}\n\treturn res\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/55", "completion": "//    TODO(\"Not yet implemented\")\n    return l1.intersect(l2).sorted()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/36", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/68", "completion": "\treturn if (a + b > c && a + c > b && b + c > a) {\n\t\tMath.round(0.5 * (a + b + c) * Math.sqrt(a * b * c))\n\t} else {\n\t\t-1\n\t}\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/60", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/101", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/19", "completion": "\tval numbersList = numbers.split(\" \")\n\tval numbersMap = mutableMapOf<String, Int>()\n\tnumbersList.forEach {\n\t\tnumbersMap[it] = it.toInt()\n\t}\n\tval sortedNumbers = numbersMap.keys.sortedBy { numbersMap[it] }\n\treturn sortedNumbers.joinToString(\" \")\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/97", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/126", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/134", "completion": "\treturn when {\n\t\ta is Int && b is Int -> if (a > b) a else b\n\t\ta is Float && b is Float -> if (a > b) a else b\n\t\ta is String && b is String -> if (a > b) a else b\n\t\telse -> null\n\t}\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/136", "completion": "\tvar result = 1L\n\tfor (i in 1..n) {\n\t\tresult *= i.factorial()\n\t}\n\treturn result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/7", "completion": "//    TODO(\"Not yet implemented\")\n    return strings.filter { it.contains(substring) }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/47", "completion": "\tvar result = 1\n\tvar base = 2\n\twhile (n > 0) {\n\t\tif (n % 2 == 1) {\n\t\t\tresult = (result * base) % p\n\t\t}\n\t\tbase = (base * base) % p\n\t\tn /= 2\n\t}\n\treturn result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/8", "completion": "//    TODO(\"Not yet implemented\")\n    return listOf(numbers.sum(), numbers.fold(1, Int::times))\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/25", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/69", "completion": "\treturn q.sum() <= w && q.reversed() == q\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/52", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/6", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/73", "completion": "//    TODO(\"Not yet implemented\")\n    return x == n.pow(x.toInt().log(n.toDouble()).toInt())\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/83", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/22", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/26", "completion": "\tval result = mutableListOf<Int>()\n\tnumbers.forEach {\n\t\tif (!result.contains(it)) {\n\t\t\tresult.add(it)\n\t\t}\n\t}\n\treturn result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/105", "completion": "//    TODO(\"Not yet implemented\")\n    var count = 0\n    for (i in arr) {\n        if (i.toString().sumDigits() > 0) {\n            count++\n        }\n    }\n    return count\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/35", "completion": "//    TODO(\"Not yet implemented\")\n    return 0\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/30", "completion": "\tval result = mutableListOf<Int>()\n\tfor (i in l) {\n\t\tif (i > 0) {\n\t\t\tresult.add(i)\n\t\t}\n\t}\n\treturn result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/80", "completion": "\treturn if (n == 1) 2 else (10 * (pow(10.0, n - 2.0)).toInt()) + 1\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/11", "completion": "\tval result = StringBuilder()\n\tfor (i in 0 until a.length) {\n\t\tresult.append(if (a[i] == b[i]) '0' else '1')\n\t}\n\treturn result.toString()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/2", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/138", "completion": "\tval fileNameArray = fileName.split(\".\")\n\tval fileNameWithoutExtension = fileNameArray[0]\n\tval fileNameExtension = fileNameArray[1]\n\tval fileNameWithoutExtensionArray = fileNameWithoutExtension.toCharArray()\n\tval fileNameExtensionArray = fileNameExtension.toCharArray()\n\tval fileNameWithoutExtensionArrayLength = fileNameWithoutExtensionArray.size\n\tval fileNameExtensionArrayLength = fileNameExtensionArray.size\n\tval fileNameWithoutExtensionArrayFirstChar = fileNameWithoutExtensionArray[0]\n\tval fileNameExtensionArrayFirstChar = fileNameExtensionArray[0]\n\tval fileNameWithoutExtensionArrayLastChar = fileNameWithoutExtensionArray[fileNameWithoutExtensionArrayLength - 1]\n\tval fileNameExtensionArrayLastChar = fileNameExtensionArray[fileNameExtensionArrayLength - 1]\n\tval fileNameWithoutExtensionArrayFirstCharIsLetter = fileNameWithoutExtensionArrayFirstChar in 'a'..'z' || fileNameWithoutExtensionArrayFirstChar in 'A'..'Z'\n\tval fileNameExtensionArrayFirstCharIsLetter = fileNameExtensionArrayFirstChar in 'a'..'z' || fileNameExtensionArrayFirstChar in 'A'..'Z'\n\tval fileNameWithoutExtensionArrayLastCharIsDigit = fileNameWithout", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/37", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/24", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/145", "completion": "\tval planets = listOf(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n\tval planet1Index = planets.indexOf(planet1)\n\tval planet2Index = planets.indexOf(planet2)\n\tval result = mutableListOf<String>()\n\tif (planet1Index == -1 || planet2Index == -1) return result\n\tif (planet1Index > planet2Index) {\n\t\tval temp = planet1\n\t\tplanet1 = planet2\n\t\tplanet2 = temp\n\t}\n\tfor (i in planet1Index + 1 until planet2Index) {\n\t\tresult.add(planets[i])\n\t}\n\treturn result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/120", "completion": "\tval collatz = mutableListOf<Int>()\n\tvar current = n\n\twhile (current!= 1) {\n\t\tcollatz.add(current)\n\t\tif (current % 2 == 0) {\n\t\t\tcurrent /= 2\n\t\t} else {\n\t\t\tcurrent = 3 * current + 1\n\t\t}\n\t}\n\tcollatz.add(1)\n\treturn collatz.filter { it % 2 == 1 }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/76", "completion": "\tval binary = StringBuilder()\n\tvar remainder = decimal\n\twhile (remainder > 0) {\n\t\tval bit = remainder % 2\n\t\tbinary.insert(0, bit)\n\t\tremainder /= 2\n\t}\n\treturn \"db$binarydb\"\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/15", "completion": "\treturn (0..n).joinToString(\" \")\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/107", "completion": "\tvar lst1Even = true\n\tvar lst2Even = true\n\tfor (i in lst1.indices) {\n\t\tif (lst1[i] % 2!= 0) {\n\t\t\tlst1Even = false\n\t\t}\n\t\tif (lst2[i] % 2!= 0) {\n\t\t\tlst2Even = false\n\t\t}\n\t}\n\tif (lst1Even) {\n\t\treturn \"YES\"\n\t}\n\tif (lst2Even) {\n\t\treturn \"YES\"\n\t}\n\treturn \"NO\"\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/16", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/61", "completion": "\tvar count = 0\n\tfor (i in s.indices) {\n\t\tif (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/115", "completion": "\tval vowels = \"aeiou\"\n\tvar closestVowel = \"\"\n\tvar closestVowelIndex = -1\n\tvar closestVowelDistance = Int.MAX_VALUE\n\tfor (i in word.indices) {\n\t\tif (vowels.contains(word[i])) {\n\t\t\tval distance = word.length - i - 1\n\t\t\tif (distance < closestVowelDistance) {\n\t\t\t\tclosestVowel = word[i]\n\t\t\t\tclosestVowelDistance = distance\n\t\t\t\tclosestVowelIndex = i\n\t\t\t}\n\t\t}\n\t}\n\treturn if (closestVowelIndex!= -1) {\n\t\tclosestVowel\n\t} else {\n\t\t\"\"\n\t}\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/111", "completion": "\tvar min = Long.MAX_VALUE\n\tvar sum = 0L\n\tfor (i in nums.indices) {\n\t\tsum += nums[i]\n\t\tif (sum < min) {\n\t\t\tmin = sum\n\t\t}\n\t\tif (sum > 0) {\n\t\t\tsum = 0L\n\t\t}\n\t}\n\treturn min\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/82", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/49", "completion": "//    TODO(\"Not yet implemented\")\n    return l.all { it < t }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/29", "completion": "//    TODO(\"Not yet implemented\")\n    return strings.filter { it.startsWith(prefix) }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/144", "completion": "\tvar count = 0\n\tfor (i in 1..n) {\n\t\tfor (j in i+1..n) {\n\t\t\tfor (k in j+1..n) {\n\t\t\t\tif ((i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0) {\n\t\t\t\t\tcount++\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/86", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/23", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/135", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/72", "completion": "//    TODO(\"Not yet implemented\")\n    return false\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/59", "completion": "\tval result = mutableListOf<Int>()\n\tfor (i in xs.indices) {\n\t\tresult.add(xs[i] * (i + 1))\n\t}\n\treturn result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/10", "completion": "\tval suffix = longestPalindrome(string)\n\tval prefix = string.substring(0, string.length - suffix.length)\n\treturn string + suffix.reversed()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/103", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/108", "completion": "\tval map = mutableMapOf<String, Int>()\n\tval words = text.split(\" \")\n\tfor (word in words) {\n\t\tif (map.containsKey(word)) {\n\t\t\tmap[word] = map[word]!! + 1\n\t\t} else {\n\t\t\tmap[word] = 1\n\t\t}\n\t}\n\treturn map\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/146", "completion": "//    val sortedList = lst.sortedBy { it.length }\n//    val sortedList = lst.sortedByDescending { it.length }\n    val sortedList = lst.sortedBy { it.length }\n    val sortedList2 = sortedList.sortedBy { it }\n    return sortedList2\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/38", "completion": "\tval set = HashSet<Int>()\n\tfor (i in l) {\n\t\tif (set.contains(-i)) return true\n\t\tset.add(i)\n\t}\n\treturn false\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/143", "completion": "\tvar count = 0\n\tfor (num in nums) {\n\t\tif (num > 10 && (num % 2!= 0 && num % 10!= 0)) {\n\t\t\tcount++\n\t\t}\n\t}\n\treturn count\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/132", "completion": "\tvar max = arr[0]\n\tvar index = 0\n\tfor (i in 1 until arr.size) {\n\t\tif (arr[i] > max) {\n\t\t\tmax = arr[i]\n\t\t\tindex = i\n\t\t}\n\t}\n\treturn if (index == arr.size - 1) -1 else index\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/12", "completion": "\treturn strings.maxByOrNull { it.length }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/31", "completion": "//    TODO(\"Not yet implemented\")\n    if (n <= 1) return false\n    if (n == 2) return true\n    if (n % 2 == 0) return false\n    var i = 3\n    while (i * i <= n) {\n        if (n % i == 0) return false\n        i += 2\n    }\n    return true\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/102", "completion": "//    val sorted = arr.sorted()\n//    val reversed = sorted.reversed()\n//    val result = reversed.map {\n//        when (it) {\n//            1 -> \"One\"\n//            2 -> \"Two\"\n//            3 -> \"Three\"\n//            4 -> \"Four\"\n//            5 -> \"Five\"\n//            6 -> \"Six\"\n//            7 -> \"Seven\"\n//            8 -> \"Eight\"\n//            9 -> \"Nine\"\n//            else -> \"\"\n//        }\n//    }\n//    return result\n    return arr.map {\n        when (it) {\n            1 -> \"One\"\n            2 -> \"Two\"\n            3 -> \"Three\"\n            4 -> \"Four\"\n            5 -> \"Five\"\n            6 -> \"Six\"\n            7 -> \"Seven\"\n            8 -> \"Eight\"\n            9 -> \"Nine\"\n            else -> \"\"\n        }\n    }\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/64", "completion": "//    val fruits = s.split(\" \")\n//    val apples = fruits[0].split(\" apples\")\n//    val oranges = fruits[1].split(\" oranges\")\n//    return totalFruits - apples[0].toInt() - oranges[0].toInt()\n    val fruits = s.split(\" \")\n    val apples = fruits[0].split(\" apples\")\n    val oranges = fruits[1].split(\" oranges\")\n    return totalFruits - apples[0].toInt() - oranges[0].toInt()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/157", "completion": "\tval stack = Stack<Int>()\n\tfor (i in operand.indices) {\n\t\tif (i == 0) {\n\t\t\tstack.push(operand[i])\n\t\t} else {\n\t\t\tval op = operator[i - 1]\n\t\t\tval a = stack.pop()\n\t\t\tval b = operand[i]\n\t\t\twhen (op) {\n\t\t\t\t\"+\" -> stack.push(a + b)\n\t\t\t\t\"-\" -> stack.push(a - b)\n\t\t\t\t\"*\" -> stack.push(a * b)\n\t\t\t\t\"/\" -> stack.push(a / b)\n\t\t\t\t\"%\" -> stack.push(a % b)\n\t\t\t\t\"**\" -> stack.push(a.toDouble().pow(b.toDouble()).toInt())\n\t\t\t\telse -> throw IllegalArgumentException(\"Unknown operator: $op\")\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.pop()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/96", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/44", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/63", "completion": "//    var sum = 0\n//    for (i in s.indices) {\n//        if (s[i].isUpperCase()) {\n//            sum += s[i].code\n//        }\n//    }\n//    return sum\n    return s.toUpperCase().map { it.code }.sum()\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/14", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/95", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/9", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/152", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/50", "completion": "\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/85", "completion": "\tval sum = array.sum()\n\tval odd = sum % 2 == 1\n\treturn array.sortedWith(compareBy<Int> { it }.thenBy { it }.reversed())\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/91", "completion": "//    val prime = listOf(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n    val prime = listOf(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 15", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/148", "completion": "\tvar sum = 0\n\tfor (i in lst) {\n\t\tif (i is Int && i % 2!= 0) {\n\t\t\tsum += i * i\n\t\t}\n\t}\n\treturn sum\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/121", "completion": "\tval datePattern = Regex(\"^(\\\\d{2})-(\\\\d{2})-(\\\\d{4})$\")\n\tval dateMatcher = datePattern.matchEntire(date)\n\tif (dateMatcher == null) return false\n\tval month = dateMatcher.groupValues[1].toInt()\n\tval day = dateMatcher.groupValues[2].toInt()\n\tval year = dateMatcher.groupValues[3].toInt()\n\tif (month < 1 || month > 12) return false\n\tif (day < 1 || day > 31) return false\n\tif (month == 2) {\n\t\tif (day < 1 || day > 29) return false\n\t} else if (month in 4..6 || month in 9..11) {\n\t\tif (day < 1 || day > 30) return false\n\t} else {\n\t\tif (day < 1 || day > 31) return false\n\t}\n\treturn true\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/137", "completion": "\tvar result = \"\"\n\tvar count = 0\n\tfor (i in text.indices) {\n\t\tif (text[i] =='') {\n\t\t\tif (count > 1) {\n\t\t\t\tresult += \"-\"\n\t\t\t} else {\n\t\t\t\tresult += \"_\"\n\t\t\t}\n\t\t\tcount++\n\t\t} else {\n\t\t\tresult += text[i]\n\t\t\tcount = 0\n\t\t}\n\t}\n\treturn result\n}\n", "language": "kotlin"}
{"task_id": "HumanEval_kotlin/77", "completion": "//    TODO(\"Not yet implemented\")\n    return false\n}\n", "language": "kotlin"}
